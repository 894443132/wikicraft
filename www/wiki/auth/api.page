<?npl
NPL.load("(gl)script/ide/System/Encoding/jwt.lua");
jwt = commonlib.gettable("System.Encoding.jwt");

local wiki_config_;
function wiki_config()
	if(not wiki_config_) then
		local config = site_config();
		local mainhost = (request:GetHost() or ""):match("^[^%.]+%.[^%.]+$");
		wiki_config_ = config[mainhost] or config["default"] or config;
	end
	return wiki_config_;
end

-- call this function to ensure we are authenticated in json request
-- @return userid, the request.userid also contains the userid
function ensureAuthenticated()
	-- request.userid = 1 -- debug use
	if(request.username~=nil) then
		return request.username;
	end
	if (not request:header('Authorization')) then
		response:status(401):send({ message = 'Please make sure your request has an Authorization header' });
		exit();
	end
	local token = request:header('Authorization'):match("%s+(%S+)");
	local payload, err = decodeJWT(token);
	if(not payload) then
		if(err == "Invalid signature") then
			response:status(401):send({ message = "invalid token"});
		elseif(err == "Not acceptable by exp") then
			response:status(401):send({ message = 'Token has expired' });	
		else
			response:status(401):send({ message = err });	
		end
		exit();
	end
	request.username = payload.username;

	return request.username;
end

-- @return userid or false if not authenticated
function checkAuthenticated()
	if(request.username~=nil) then
		return request.username;
	end
	local authHeader = request:header('Authorization');
	if (authHeader) then
		local token = authHeader:match("%s+(%S+)");
		local payload, err = decodeJWT(token);
		if(payload) then
			request.username = payload.username;
		end	
	end
	return request.username;
end
