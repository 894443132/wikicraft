<?npl
--[[
Title: wallet
Author: big
Date: 2017/7/11
]]

include_once("./abstract/base.page");
include_once("./abstract/multi_user_base.page");

local wallet = inherit(models.abstract.multi_user_base, gettable("models.wallet"));

wallet.db_name = "wallet";

function wallet:ctor()
	-- keepwork username
	self:addfield("username","string",false);
	-- user blance
	self:addfield("money","number",false);
	-- update blance date
	self:addfield("update_date","string",false);
end

function wallet:api_getBalance()
	local username = self:getUsername();

	self:db():findOne({username = username}, resume);
	local err, walletInfo = yield();

	if not err then
		return errors:wrap(nil, walletInfo);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function wallet:balance(price, username)
	if(not price or not username) then
		return false;
	end

	self:db():findOne({username = username}, resume);
	local err, walletInfo = yield();
	log(walletInfo, true);
	local isSuccess = false;

	if not err and walletInfo ~= nil then
		local updateWalletInfo = self:updateBalance(walletInfo, price, username);

		if(updateWalletInfo) then
			isSuccess = true;
		end
	else
		local createWalletInfo = self:createBalanceUser(username);

		if(createWalletInfo) then
			local updateWalletInfo = self:updateBalance(walletInfo, price, username);

			if(updateWalletInfo) then
				isSuccess = true;
			end
		end
	end

	if(isSuccess) then
		return true;
	else
		return false;
	end
end

function wallet:updateBalance(walletInfo, price, username)
	local balance = walletInfo.balance + price;

	if(balance < 0) then
		return false;
	end

	local balanceInfo = {};
	balanceInfo.username    = username;
	balanceInfo.balance     = balance;
	balanceInfo.update_date = self:getNow();

	self:db():updateOne({username = username}, balanceInfo, resume)
	local err, walletInfo = yield();

	if not err then
		return walletInfo;
	else
		return false;
	end
end

function wallet:createBalanceUser(username, callback)
	local balanceInfo = {}
	balanceInfo.username    = username;
	balanceInfo.balance     = 0;
	balanceInfo.update_date = self:getNow();

	self:db():insertOne({username = username}, balanceInfo, resume);
	local err, walletInfo = yield();
	
	if not err and walletInfo ~= nil then
		return walletInfo;
	else
		return false;
	end
end

function wallet:getNow()
	return ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss");
end
