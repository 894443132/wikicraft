<?npl
--[[
Title: tags of pages
Author: ZhengJiabiao
Date: 2018/1
Desc: tags in pages,only to be used in backend data analysis
]]
include_once("./abstract/base.page")
include_once("./user.page")
include_once("./elasticsearch.page")
include_once("./validators.page")

local tags = inherit(models.abstract.base, gettable("models.tags"))
tags.db_name = "tags"

local es = models.elasticsearch:new()
es:connect({index="kw_tags"})


function tags:ctor()
    self:addfield("title", "string", false, 30)
    self:addfield("creator", "string", false, 30)
    self:addfield("createDate", "string", false, 64)
end


function tags:api_insert(params)
    -- self:ensureAuthenticated()
    local tag, is_params_error, msg = self:insert_validator(params)
    if (is_params_error) then
        return response:status(404):send({error={message=msg,status=404}})
    end
    self:db():findOne({["+title"] = {tag.title}}, resume)
    local err, result = yield()
    if (not result) then
        self:db():insertOne({["+title"] = {tag.title}}, tag, resume)
        err, result = yield()
        if (result) then
            self:insert_to_es(result)
        end
    end
    return errors:wrap(err, result)
end


function tags:insert_validator(params)
    local tag
    local required_fields = {"title", "username"}
    local fields_length = {title=30,username=30}
    local validators = models.validators:new()
    local validate_tasks = {
        {
            validator = validators.required_fields_validator,
            condition = required_fields
        },
        {
            validator = validators.fields_length_validator,
            condition = fields_length
        }
    }
    for i, task in ipairs(validate_tasks) do
        validators:add_validators(task.validator, params, task.condition)
    end
    local is_params_error, msg = validators:get_validate_result()

    if (not is_params_error) then
        local not_sensitive = sensitiveWordFilter({title=params.title})
        if (not not_sensitive) then
            is_params_error = true
            msg = "sensitive words included"
        end
    end
    if (not is_params_error) then
        local User = models.user:new()
        User:db():findOne({["+username"]={params.username}}, resume)
        local _, exist_user = yield()
        if (not exist_user) then
            is_params_error = true
            msg = "user not exist"
        end
    end
    if (not is_params_error) then
        tag = {
            title = params.title,
            creator = params.username,
            createDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
        }
    end
    return tag, is_params_error, msg
end


function tags:getByName(params)
    if (not params.title) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end
    self:db():findOne({["+title"]={params.title}}, resume)
    return errors:wrap(yield())
end


function tags:getById(params)
    if (not params._id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end
    self:db():findOne({_id=params._id}, resume)
    return errors:wrap(yield())
end


function tags:delete(params)
    -- self:ensureAuthenticated()
    if (not params.title) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end
    self:db():findOne({["+title"]={params.title}}, resume)
    local err, result = yield()
    if (result) then
        self:db():deleteOne({_id=params._id}, resume)
        err, result = yield()
        if (result) then
            self:delete_in_es(params)
        end
    end
    return errors:wrap(err, result)
end


-- insert tags into elasticsearch
function tags:insert_to_es(params)
    local tag = {
        type = "tags",
        id = params._id,
        title = params.title,
        creator = params.creator,
        createDate = params.createDate
    }
    return es:insertOne(tag)
end


-- delete tags in elasticsearch
function tags:delete_in_es(params)
    local tag = {
        type = "tags",
        id = params._id
    }
    return es:deleteOne(params)
end

