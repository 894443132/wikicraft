<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/11/01
]]
include_once("./abstract/base.page")
include_once("./user.page")

local user_fans = inherit(models.abstract.base, gettable("models.user_fans"))

user_fans.db_name = "user_fans";

function user_fans:ctor() 
	self:addfield("userId", "number", false)
	self:addfield("fansUserId", "number", false) -- fans userId 
end

function user_fans:api_upsert(params)
	if (not params.userId) or (not params.fansUserId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local err, params = self:validateQuery(params)
	self:db():insertOne({["+userId+fansUserId"]={params.userId, params.fansUserId}}, params, resume)
	
	return errors:wrap(yield())
end


-- 获得用户的粉丝
function user_fans:api_getFansByUserId(params) 
	if not params.userId then 
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end

	local skip, limit = util:pagination(params)	

	self:db():count({["+userId"]=params.userId}, resume)
	local err, total = yield()
	total = total or 0

	self:db():find({["+userId"]=params.userId, skip=skip, limit=limit}, resume)
	local err, data = yield()
	data = data or {}

	local userDB = models.user:new()
	for _, value in pairs(data) do
		value['userinfo'] = userDB:api_getById({userId=value.fansUserId}).data
	end

	return errors:wrap(nil,{total=total, userList=data})
end


