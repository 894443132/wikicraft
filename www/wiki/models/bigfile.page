<?npl
--[[
Title: big file list
Author: wuxiangan
Date: 2017/09/11
]]

include_once("./abstract/base.page")
include_once("./qiniu_files.page")

local bigfile = inherit(models.abstract.base, gettable("models.bigfile"))
bigfile.db_name = "bigfile"

function bigfile:ctor()
	self:addfield("channel", "string") -- 存贮方式 qiniu  youku  
	self:addfield("source_url", "string") -- channel=none 网络视屏地址
	self:addfield("file_id", "number") -- channel ~= none 文件id
end


function bigfile:api_upsert(params)
	if not params.channel then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if params._id then
		self:db():updateOne({_id=params._id}, params, resume)
	else
		self:db():insertOne(nil, params, resume)
	end

	return errors:wrap(yield())
end


function bigfile:api_getDownloadUrlById(params)
	if not params._id then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params._id}, resume)
	local _, bf = yield()

	if not bf then
		return errors:wrap(errors.NOT_FOUND)
	end

	local download_url = ""
	if bf.channel == const.BIGFILE_QINIU then
		local qiniuFileDB = models.qiniu_files:new()
		download_url = qiniuFileDB:api_getDownloadUrlById({_id=bf.file_id}).data
	else
		download_url = bf.source_url
	end
	
	return errors:wrap(nil, download_url)
end


function bigfile:api_upload(params)
	if not params.channel then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local data = {channel=params.channel}

	if params.channel == const.BIGFILE_QINIU then
		local qiniuFileDB = models.qiniu_files:new()
		local ret = qiniuFileDB:api_upload(params)
		if ret.error.id ~= 0 then
			return ret
		end
		data.file_id = ret.data._id
	else
		if not params.download_url then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR)
		end
		data.source_url = params.download_url
	end

	return self:api_upsert(data)
end



