<?npl
--[[
Title: pay model
Author: big
Date: 2017/7/7
]]

include_once("./abstract/base.page");
include_once("./user.page");

local pay = inherit(models.abstract.base,gettable("models.pay"));

pay.db_name  = "pay";
pay.apiUrl   = "https://api.pingxx.com/v1/";
pay.appToken = KEEPWORK["config"]["default"]["threeService"]["pingxx"]["appToken"];
pay.appId    = KEEPWORK["config"]["default"]["threeService"]["pingxx"]["appId"];

function pay:ctor()
	-- keepwork username
	self:addfield("username", "string",false);
	-- total money
	self:addfield("price", "number", false, 10);
	-- pay channel
	self:addfield("channel", "string", false, 50);
	-- pay content
	self:addfield("content", "string", false);
	-- order subject
	self:addfield("subject", "string", false, 100);
	-- beneficiary
	self:addfield("beneficiary", "string", false);
	-- order content
	self:addfield("body", "string", false, 300);
	-- pay status
	self:addfield("status", "string", false);
	-- order id
	self:addfield("order_id", "number", false);
	-- pay method
	self:addfield("method", "string", false);
	-- pay or recharge date
	self:addfield("create_date", "string", false);

	-- from ping++

end

function pay:api_createCharge(params)
	local err, query = self:validateQuery(params);

	local url = self.apiUrl .. "charges";

	local order_no = tostring(math.random(1000000,9999999));

	local apiParams = {};
	apiParams.order_no   = order_no;
	apiParams.client_ip  = request:getpeername();
	apiParams.amount     = query.price;
	apiParams.channel    = query.channel;
	apiParams.subject    = query.subject;
	apiParams.body       = query.body;
	apiParams.currency   = "cny";
	apiParams.app        = {id = self.appId};

	if(apiParams.channel == "alipay_pc_direct") then
		apiParams.extra = {success_url = "http://dev.keepwork.com/api/wiki/models/pay/webhooks"};
	elseif(apiParams.channel == "wx_pub_qr") then
		apiParams.extra = {product_id = order_no};
	end

	log(apiParams,true);

	System.os.GetUrl({
		url    = url,
		headers = {
			Authorization = "Bearer " .. self.appToken,
			["content-type"]  = "application/json",
		},
		form   = apiParams,
		method = "POST",
		json   = true,
	},resume);

	local err, response = yield();

	--log(response,true);

	if (err ~= 200) then
		return errors:wrap(errors.SERVER_INNER_ERROR, {message="pint++ server is not avaliable"});
	end

	return errors:wrap(nil, response);
end

function pay:api_getCharge()
	
end

function pay:api_webhooks()
	local path = "webhooks";
	--log(path);
	local file = ParaIO.open(path, "w");
	
	local value = "webhooks";

	file:write(value,#value);
	file:close();

	return errors:wrap("SUCCESS",nil);
end
