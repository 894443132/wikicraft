<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/24
]]
include_once("./abstract/base.page")
include_once("./user.page")
include_once("./website.page")

local user_favorite = inherit(models.abstract.base, gettable("models.user_favorite"))
user_favorite.db_name = "user_favorite";


function user_favorite:ctor() 
	self:addfield("userId", "number", false)         -- 用户ID
	self:addfield("favoriteUserId", "number", false) -- 被收藏的用户ID
	self:addfield("favoriteType", "number", false)   -- 0 - user 1 - website
	self:addfield("favoriteSubType", "number", false)   -- 0 - user 1 - website
	self:addfield("favoriteId", "number", false)     -- userId websiteId
	self:addfield("updateDate", "string", false)     -- 收藏日期
end

-- debug use
function user_favorite:api_create(params)
	log(params)
	self:db():insertOne(nil, params, resume)
	
	return errors:wrap(yield())
end


-- 创建用户收藏
function user_favorite:create(params)
	local userId = self:ensureAuthenticated()
	local err, query = self:validateQuery(params)
	
	self:db():insertOne(nil, query, resume)
	
	return errors:wrap(yield())
end

-- 收藏用户
function user_favorite:api_favoriteUser(params)
	local currentDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	if (not params.userId) or (not params.favoriteUserId) or (not params.favoriteWebsiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	-- 创建收藏用户记录
	local record = {userId = params.userId, favoriteUserId=params.favoriteUserId, favoriteType=const.FAVORITE_TYPE_USER, favoriteId=params.favoriteUserId, updateDate=currentDate}
	local query = {["+userId+favoriteUserId+favoriteType+favoriteId"]={params.userId,params.favoriteUserId, const.FAVORITE_TYPE_USER, params.favoriteUserId}}
	self:db():insertOne(query, record, resume)
	local err, data = yield()

	-- 创建收藏用户个人站点记录
	record = {userId = params.userId, favoriteUserId=params.favoriteUserId, favoriteType=const.FAVORITE_TYPE_WEBSITE, favoriteId=params.favoriteWebsiteId, updateDate=currentDate}
	query = {["+userId+favoriteUserId+favoriteType+favoriteId"]={params.userId,params.favoriteUserId, const.FAVORITE_TYPE_WEBSITE, params.favoriteWebsiteId}}
	self:db():insertOne(query, record, resume)
	local err, data = yield()
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND)
	end
	
	-- 修改用户收藏的数量
	--local userDB = models.user:new()
	--userDB:updateFavoriteCount(params.userId, 1)	
	-- 被收藏的用户粉丝数+1
	--userDB:updateFansCount(params.favoriteUserId, 1)

	return errors:wrap()
end

-- 收藏作品
function user_favorite:api_favoriteSite(params)
	local currentDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	if (not params.userId) or (not params.favoriteUserId) or (not params.favoriteWebsiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	-- 创建收藏用户个人站点记录
	record = {userId = params.userId, favoriteUserId=params.favoriteUserId, favoriteType=const.FAVORITE_TYPE_WEBSITE, favoriteId=params.favoriteWebsiteId, updateDate=currentDate}
	query = {["+userId+favoriteUserId+favoriteType+favoriteId"]={params.userId,params.favoriteUserId, const.FAVORITE_TYPE_WEBSITE, params.favoriteWebsiteId}}
	self:db():insertOne(query, record, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err)
	end
	
	-- 修改用户收藏的数量
	local userDB = models.user:new()
	local favoriteCount = self:api_getFavoriteWebsiteCountByUserId({userId=params.userId}).data
	local fansCount = self:api_getFansCountByUserId({userId=params.userId}).data
	userDB:api_updateUserInfo({_id=params.userId, favoriteCount=favoriteCount, fansCount=fansCount})

	return errors:wrap()
end

-- 取消收藏
function user_favorite:api_unfavoriteSite(params)
	if (not params.userId) or (not params.favoriteUserId) or (not params.favoriteWebsiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	-- 创建收藏用户个人站点记录
	query = {["+userId+favoriteUserId+favoriteType+favoriteId"]={params.userId,params.favoriteUserId, const.FAVORITE_TYPE_WEBSITE, params.favoriteWebsiteId}}
	self:db():deleteOne(query, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err)
	end
	
	-- 修改用户收藏的数量
	local userDB = models.user:new()
	local favoriteCount = self:api_getFavoriteWebsiteCountByUserId({userId=params.userId}).data
	local fansCount = self:api_getFansCountByUserId({userId=params.userId}).data
	userDB:api_updateUserInfo({_id=params.userId, favoriteCount=favoriteCount, fansCount=fansCount})

	return errors:wrap()
end


-- 获得用户收藏的用户
function user_favorite:api_getFavoriteUserListByUserId(params) 
	local userId = self:ensureAuthenticated()
	userId = params.userId or userId
	
	-- 获取数量
	self:db():count({['+userId+favoriteType']={userId, const.FAVORITE_TYPE_USER}}, resume)
	local err, total = yield()
	
	if err then
		return errors:wrap(err)
	end	

	local skip, limit = util:pagination(params)
	self:db():find({["+userId+favoriteType"]={userId, const.FAVORITE_TYPE_USER, skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err or (not data) then
		return errors:wrap(err, data)
	end

	local userDB = models.user:new()
	local websiteDB = models.website:new()
	for _, value in pairs(data) do
		value["userinfo"] = userDB:api_getById({userId=value.favoriteId}).data
		value["siteinfo"] = websiteDB:api_getPersonalSiteByUserId({userId=value.favoriteId}).data
	end
	
	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total,limit), favoriteList=data})
end

-- 获得用收藏作品的数量
function user_favorite:api_getFavoriteWebsiteCountByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+userId+favoriteType"]={params.userId, const.FAVORITE_TYPE_WEBSITE}}, resume)
	
	return errors:wrap(yield())
end

-- 获得用户收藏的作品
function user_favorite:api_getFavoriteWebsiteListByUserId(params) 
	local userId = self:ensureAuthenticated()
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local total = self:api_getFavoriteWebsiteCountByUserId(params).data
	if not total then
		return errors:wrap(err or errors.NOT_FOUND)
	end

	local skip, limit = util:pagination(params)
	self:db():find({["+userId"]={params.userId, skip=skip, limit=limit},{"favoriteType", const.FAVORITE_TYPE_WEBSITE}}, resume)
	local err, data = yield()

	if err or (not data) then
		return errors:wrap(err, data)
	end

	local userDB = models.user:new()
	local websiteDB = models.website:new()
	for _, value in pairs(data) do
		value["siteinfo"] = websiteDB:api_getById({websiteId=value.favoriteId}).data
		value["userInfo"] = userDB:api_getById({userId=value.favoriteUserId}).data
	end
	
	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total, limit),favoriteList=data})
end

-- 获得用户的粉丝数
function user_favorite:api_getFansCountByUserId(params)
	local query = {}
	local indexName = "+favoriteUserId+favoriteType+favoriteId"
	if not params.userId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	query[#query+1] = params.userId

	if params.websiteId then
		query[#query+1] = const.FAVORITE_TYPE_WEBSITE
		query[#query+1] = params.websiteId
	else
		-- 同一用户收藏多个作品重复统计则屏蔽此行
		-- 当收藏作品时需产生一条收藏用户的记录
		query[#query+1] = const.FAVORITE_TYPE_USER
	end
	self:db():count({[indexName] = query}, resume)
	
	return errors:wrap(yield())
end

-- 获取单个项目的关注人列表
function user_favorite:api_getFansListByUserId(params)
	local query = {}
	local indexName = "+favoriteUserId+favoriteType+favoriteId"
	if not params.userId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	query[#query+1] = params.userId

	if params.websiteId then
		query[#query+1] = const.FAVORITE_TYPE_WEBSITE
		query[#query+1] = params.websiteId
	else
		-- 同一用户收藏多个作品重复统计则屏蔽此行
		-- 当收藏作品时需产生一条收藏用户的记录
		query[#query+1] = const.FAVORITE_TYPE_USER
	end

	local skip, limit = util:pagination(params) 
	query.skip = skip
	query.limit = limit 

	self:db():find({[indexName] = query}, resume)
	local err, data = yield()
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND)
	end

	local userDB = models.user:new()
	for _,value in pairs(data) do
		value['userinfo'] = userDB:api_getById({userId=value.userId}).data
	end

	local total = self:api_getFansCountByUserId(params).data
	if not total then
		return errors:wrap(err or errors.NOT_FOUND)
	end

	return {error=errors.SUCCESS, data = {total = total, pageCount=util:getPageCount(total, limit), fansList=data}}	
end

-- 获得站点被收藏的数量
function user_favorite:api_getCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+favoriteType+favoriteId"]={const.FAVORITE_TYPE_WEBSITE,params.websiteId}}, resume)
	return errors:wrap(yield())
end

-- 删除用户的收藏和被收藏
function user_favorite:api_deleteByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():delete({["+userId"]={params.userId}}, resume)
	local err, data = yield()
	
	self:db():delete({["+favoriteUserId"]={params.userId}}, resume)
	local err, data = yield()

	return errors:wrap()
end


