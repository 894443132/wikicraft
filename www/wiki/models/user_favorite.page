<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/24
]]
include_once("./abstract/base.page")
include_once("./user.page")
include_once("./website.page")

local user_favorite = inherit(models.abstract.base, gettable("models.user_favorite"))
user_favorite.db_name = "user_favorite";

userDB = models.user:new()
websiteDB = models.website:new()

function user_favorite:ctor() 
	self:addfield("userId", "number", false)
	self:addfield("favoriteUserId", "number", false) -- 被收藏的用户ID
	self:addfield("favoriteType", "number", false) -- 0 - user 1 - website
	self:addfield("favoriteId", "number", false) -- userId websiteId
end

-- debug use
function user_favorite:api_create(params)
	log(params)
	self:db():insertOne(nil, params, resume)
	
	return errors:wrap(yield())
end

-- 创建用户收藏
function user_favorite:create(params)
	local userId = self:ensureAuthenticated()
	local err, query = self:validateQuery(params)
	
	self:db():insertOne(nil, query, resume)
	
	return errors:wrap(yield())
end

-- 获得用户收藏的用户
function user_favorite:api_getFavoriteUserListByUserId(params) 
	local userId = self:ensureAuthenticated()
	userId = params.userId or userId
	
	local skip, limit = util:pagination(params)
	self:db():find({["+userId"]={userId, skip=skip, limit=limit},{"favoriteType", const.FAVORITE_TYPE_USER}}, resume)
	local err, data = yield()

	if err or (not data) then
		return errors:wrap(err, data)
	end

	local userList = {}
	for _, value in pairs(data) do
		userList[#userList + 1] = userDB:api_getById({userId=value.favoriteId}).data
		log(userList[#userList+1])
	end
	
	return {error=errors.SUCCESS, data=userList}
end


-- 获得用户收藏的作品
function user_favorite:api_getFavoriteWebsiteListByUserId(params) 
	local userId = self:ensureAuthenticated()
	userId = params.userId or userId
	
	local skip, limit = util:pagination(params)
	self:db():find({["+userId"]={userId, skip=skip, limit=limit},{"favoriteType", const.FAVORITE_TYPE_WEBSITE}}, resume)
	local err, data = yield()

	if err or (not data) then
		return errors:wrap(err, data)
	end

	local websiteList = {}
	for _, value in pairs(data) do
		local site = websiteDB:api_getById({websiteId=value.favoriteId}).data
		site.userInfo = userDB:api_getById({userId=value.favoriteUserId}).data
		websiteList[#websiteList+1] = site
	end
	
	return {error=errors.SUCCESS, data=websiteList}
end

-- 获取单个项目的关注人列表
function user_favorite:api_getFansListByUserId(params)
	local query = {}
	local indexName = "+favoriteUserId+favoriteType+favoriteId"
	if not params.userId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params) 
	query[#query+1] = params.userId

	if params.websiteId then
		query[#query+1] = const.FAVORITE_TYPE_WEBSITE
		query[#query+1] = params.websiteId
	else
		-- 同一用户收藏多个作品重复统计则屏蔽此行
		-- 当收藏作品时需产生一条收藏用户的记录
		query[#query+1] = params.const.FAVORITE_TYPE_USER
	end
	self:db():count({[indexName] = query}, resume)
	local err, count = yield()
	log(count)
	if err or (not count) then
		return errors:wrap(err or errors.NOT_FOUND)
	end
	
	query.skip = skip
	query.limit = limit 

	self:db():find({[indexName] = query}, resume)
	local err, data = yield()
	log(data)
	
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND)
	end

	local userList = {}
	for _,value in pairs(data) do
		userList[#userList+1] = userDB:api_getById({userId=value.userId}).data
	end

	return {error=errors.SUCCESS, data = {total = count, fansList=userList}}	
end

