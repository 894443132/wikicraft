<?npl
--[[
Title: all pages owned by a website
Author: wuxiangan
Date: 2016/10/12
]]

include_once("./abstract/base.page");

--local errors = models.errors:new();
local website_pages = inherit(models.abstract.base, gettable("models.website_pages"));

website_pages.db_name = "website_pages";
-- max length of pages
website_pages.max_length = 10000;

function website_pages:ctor()
	self:addfield("name", "string", false, 32);  -- 页面名
	self:addfield("url", "string", true, 120);  -- 页面url
	self:addfield("websiteId", 'number', false); -- 所属站点id
	self:addfield("websiteName", 'string', false); -- 所属站点名
	self:addfield("contentType", "string", false, 12);  -- 页内容类型  html, markdown
	self:addfield("content", "string", false, 100000);  -- 具体页面内容
end

function website_pages:delete(params)
	self:db():deleteOne(params, resume);
	local err, data = yield();
	
	if err then 
		return {error=errors:New(err), data= nil};
	end

	return {error=errors.SUCCESS, data=data};
end


function website_pages:get(params)
	self:db():find(params, resume);
	local err, data = yield();

	if err then 
		return {error=errors:New(err), data= nil};
	end

	return {error=errors.SUCCESS, data=data};
end

function website_pages:api_getWebsitePageByUrl(query) 
	if not query.url then
		return {error=errors.REQUEST_PARAMS_ERROR,data=nil}		
	end

	self:db():findOne({url=query.url}, resume)	
	local err, data = yield()
	if err then
		return {error=errors:New(err), data=nil};
	end	

	return {error=errors.SUCCESS, data=data};
end

function website_pages:create(params) 
	local data = self:api_getWebsitePageByUrl(params);
	
	if data.data then 
		self:db():updateOne({url=params.url}, params, resume);
	else 
		self:db():insertOne(nil, params, resume);
	end	
	local err, data = yield()
	
	if err then
		return {error=errors:New(err), data=nil};
	end
	
	return {error=errors.SUCCESS,data=data};
end
