<?npl
--[[
Title: all pages owned by a website
Author: wuxiangan
Date: 2016/10/12
]]

include_once("./abstract/base.page");
include_once("./website_template_style.page");
include_once("./website.page");
include_once("./user.page");
include_once("./website_renewal.page");

--local errors = models.errors:new();
local website_pages = inherit(models.abstract.base, gettable("models.website_pages"));

website_pages.db_name = "website_pages";
-- max length of pages
website_pages.max_length = 10000;

function website_pages:ctor()
	self:addfield("userId", "number")            -- 用户ID
	self:addfield("name", "string", false, 32);  -- 页面名
	self:addfield("url", "string", true, 120);  -- 页面路径   /websiteName/pageName
	self:addfield("websiteId", 'number', false); -- 所属站点id
	self:addfield("websiteName", 'string', false); -- 所属站点名
	-- self:addfield("contentType", "string", false, 12);  -- 页内容类型  html, markdown
	self:addfield("content", "string", false, 100000);  -- 具体页面内容
	-- sha hash: sha1("blob "+"filesize"+"\0"+"content");
	self:addfield("sha", "string", false, 128);  -- 内容哈希值
end

function website_pages:delete(params)
	self:db():deleteOne(params, resume);
	local err, data = yield();
	
	if err then 
		return {error=errors:new(err), data=data};
	end

	return {error=errors.SUCCESS, data=data};
end

-- 删除站点所有页
function website_pages:api_deleteByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():delete({["+websiteId"]={params.websiteId}}, resume)
	return errors:wrap(yield())
end


-- 创建修改记录
function website_pages:api_upsert(params)
	local userId = self:ensureAuthenticated() -- 此函数只能是授权用户操作自己的页面
	if (not params.url) or (not params.name) or (not params.websiteId) or (not params.websiteName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	if params.userId and params.userId ~= userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.userId = userId
	
	-- 创建一条更新记录
	local websiteDB	= models.website:new()
	local websiteRenewalDB = models.website_renewal:new()
	local site = websiteDB:api_getPersonalSiteByUserId({userId=params.userId}).data
	if not site then 
		log(params.userId)
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end
	local ret = websiteRenewalDB:api_upsert({websiteId=site._id, worksId=params.websiteId}).data
	if not ret then
		log("create or update renewal record error!!!")
	end
	
	-- 添加或修改页	
	local data = self:api_getWebsitePageByUrl(params).data
	
	if data then 
		self:db():updateOne({url=params.url}, params, resume);
	else 
		self:db():insertOne(nil, params, resume);
	end	
	
	return errors:wrap(yield())
end

-- 修改页面内容
function website_pages:api_updateContentAndShaByUrl(params) 
	self:ensureAuthenticated()

	if not params.url then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local result = self:api_getWebsitePageByUrl(params)
	
	if not result.data then
		return result
	end
	
	local pageinfo = result.data
	pageinfo.content = params.content
	pageinfo.sha = params.sha or pageinfo.sha
	return self:api_upsert(pageinfo)
end

function website_pages:create(params) 
	return self:api_upsert(params)
end

function website_pages:update(params)
	return self:api_upsert(params)
end

function website_pages:get(params)
	self:db():find(params, resume);
	local err, data = yield();

	if err then 
		return {error=errors:new(err), data= nil};
	end

	return {error=errors.SUCCESS, data=data};
end

function website_pages:api_getWebsitePageByUrl(params) 
	if not params.url then
		return {error=errors.REQUEST_PARAMS_ERROR,data=nil}		
	end

	self:db():findOne({url=params.url}, resume)	
	local err, data = yield()
	if err then
		return {error=errors:new(err), data=nil};
	end	

	return {error=errors.SUCCESS, data=data};
end

function website_pages:api_getWebsiteStylePageByUrl(params)
	if not params.url then
		return {error=errors.REQUEST_PARAMS_ERROR,data=nil}		
	end
	
	-- 获取页面内容代码
	self:db():findOne({url=params.url}, resume)	
	local err, page = yield()
	if err or (not page) then
		return {error=errors:new(err), data=page};
	end	

	-- 获取站点
	local website = models.website:new();
	website:db():findOne({name=page.websiteName}, resume);
	local err, site = yield();
	if err or (not site)then
		return {error=errors:new(err), data=nil};
	end

	-- 获取样式代码
	local template_style = models.website_template_style:new();	
	style = template_style:api_getWebsiteTemplateStyleById({_id=site.styleId});
	
	return {error=errors.SUCCESS, data ={style=style.data, page=page}};		
end


function website_pages:api_getWebsiteAllPageByWebsiteName(params)
	if not params.websiteName then
		return {error=errors.REQUEST_PARAMS_ERROR, nil};
	end
		
	local pageTree = {}
	local pageArray = self:get({websiteName=params.websiteName}).data;
	pageTree = self:getPageTreeByPageArray(pageArray, pageTree);
	
	pageTree = self:getArrayTree(pageTree)
	return {error=errors.SUCCESS, data=pageTree};
end

function website_pages:api_getAllPageByUid(params) 
	if not params.userid then
		return {error=errors.REQUEST_PARAMS_ERROR, nil};
	end
		
	local website = models.website:new();
	local sites = website:get({userid=tonumber(params.userid)});

	if not errors:isOk(sites.error) then
		return sites;
	end
	
	sites = sites.data;
	local pageTree = {}
	for key, site in pairs(sites) do
		local pageArray = self:get({websiteName=site.name}).data;
		pageTree = self:getPageTreeByPageArray(pageArray, pageTree);
	end
	
	pageTree = self:getArrayTree(pageTree)
	return {error=errors.SUCCESS, data=pageTree};
end

function website_pages:getUrlArray(array, url, start)
	array = array or {};
	start = start or 1;
    local s, e, v = url:find('/?([^/]+)', start);
    if s == nil then 
        return array;
    end 

    array[#array+1] = v;

    return self:getUrlArray(array, url, e+1);
end

function website_pages:getPageTreeByPageArray(pageArray, pageTree)
	pageTree = pageTree or {};
	for key, page in pairs(pageArray) do
		local array = self:getUrlArray({}, page.url, 1);				
		tree = pageTree;
		for i=1, #array , 1 do
			if i == #array then
				tree[array[i]] = page;
				page._isLeaf = true;
			else
				if not tree[array[i]] then 
					tree[array[i]] = {_isLeaf=false};
				end
				tree = tree[array[i]];
			end
		end
	end
	return pageTree;
end


function website_pages:getArrayTree(objectTree) 
	local pages = {}
	
	for key, value in pairs(objectTree) do
		if key ~= "_isLeaf" then
			if value._isLeaf then
				pages[#pages+1] = value
			else
				pages[#pages+1] = {name=key, _isLeaf=false, pages=self:getArrayTree(value)}
			end
		end
	end
	
	return pages
end

-- params: in websiteName
function website_pages:api_getWebsitePageList(params)
	if not params.websiteName then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end

	self:db():find({websiteName=params.websiteName}, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=data}
end

-- 访问页面
function website_pages:api_visitPage(params)
	if not params.url then
		return {error=errors.REQUEST_PARAMS_ERROR,data=nil}		
	end
	
	-- 获取页面内容代码
	self:db():findOne({url=params.url}, resume)	
	local err, page = yield()
	if err or (not page) then
		return {error=errors:new(err), data=page};
	end	

	-- 获取站点, 浏览数加1
	local website = models.website:new();
	website:api_addVisitNum(page.websiteName)		

	return {error=errors.SUCCESS, data=page};		
end

-- 获得站点页数
function website_pages:api_getCountByWebsiteName(params)
	if not params.websiteName then 
		return {error=errors.REQUEST_PARAMS_ERROR}
	end
	
	self:db():count({["+websiteName"]={params.websiteName}}, resume)
	return errors:wrap(yield())
end

-- 获得站点页数
function website_pages:api_getCountByWebsiteId(params)
	if not params.websiteId then 
		return {error=errors.REQUEST_PARAMS_ERROR}
	end
	
	self:db():count({["+websiteName"]={params.websiteId}}, resume)
	return errors:wrap(yield())
end

-- 获取用户页详细信息
function website_pages:api_getDetailInfo(params)
	if (not params.sitename) or (not params.pagename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local websiteDB = models.website:new()
	local siteinfo = websiteDB:api_getByName({websiteName=params.sitename}).data
	if not siteinfo then
		return errors:wrap(errors.NOT_FOUND)
	end
	
	local userDB = models.user:new()
	local userinfo = userDB:api_getById({userId=siteinfo.userId}).data
	if not userinfo then
		return  errors:wrap(errros.NOT_FOUND)
	end
	
	local pageurl = "/" .. params.sitename .. "/" .. params.pagename
	self:db():findOne({["+url"]={pageurl}}, resume)
	local err, pageinfo = yield()

	if err or (not pageinfo) then
		return errors:wrap(err or errors.NOT_FOUND)
	end

	return errors:wrap(nil, {userinfo=userinfo, siteinfo=siteinfo, pageinfo=pageinfo})
end








