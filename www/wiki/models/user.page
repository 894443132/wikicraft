<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/21
]]
include_once("./abstract/base.page")
include_once("./website.page")

local user = inherit(models.abstract.base, gettable("models.user"))
user.db_name = "user"

local websiteDB = models.website:new()

function user:ctor()
	self:addfield("username", "string", false, 30)
	self:addfield("nickname", "string", false, 30)
	self:addfield("email", "string", false, 30) -- private email, can be used to login
	self:addfield("password", "string", false, 256) -- hashed password
	self:addfield("cellphone", "string", false, 12) -- hashed password
	self:addfield("sex", "string", false, 12)
	self:addfield("githubId", "number", false) -- github id
	self:addfield("githubToken", "table", false) -- github access token
	self:addfield("portrait", "string", false, 200) -- picture url
	self:addfield("comment", "string", false, 300)
	self:addfield("company", "string", false, 30)
	self:addfield("location", "string", false, 50)
	self:addfield("joindate", "string", false, 30)
	self:addfield("isadmin", "boolean", false);
end

function user:encodePassword(password)
	return ParaMisc.md5(password or "")
end

function user:get(params) 
	if not params._id then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}	
	end
	
	self:db():findOne({_id=params._id}, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=data}
end

-- 更新用户信息
function user:update(params) 
	self:ensureAuthenticated()
	local err, query = self:validateQuery(params)
	if err or (not query._id) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	if query then
		-- following field is forbidden to change by the user. 
		query.email = nil
		query.password = nil
		query.githubId = nil
		query.githubToken = nil
	end

	self:db():updateOne({_id=query._id}, query, resume)

	return errors:wrap(yield())
end

function user:create(params) 
	local err, query = self:validateQuery(params)
	if err or (not query._id) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne(nil, params, resume)
	return errors:wrap(yield())
end

function user:delete(params)
	local userId = self:ensureAuthenticated()

	self:db():deleteOne({_id=userId}, resume)
	return errors:wrap(yield())
end

-- 
function user:deleteById(params) 
	local userId = self:ensureAuthenticated()

	self:db():deleteOne(
		{_id=userId}, 
		function(err,data) 
			websiteDB:deleteUserWebsite(userId)
		end)
	
	return errors:wrap()
end

function user:api_changepw(params)
	local userId = self:ensureAuthenticated()
	if (not params.oldpassword) or (not params.newpassword) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=userId}, resume)
	local err, user = yield()
	
	if not user then 
		return errors:wrap(errors.NOT_FOUND)
	end
	
	local oldpassword = self:encodePassword(params.oldpassword)
	local newpassword = self:encodePassword(params.newpassword)

	if user.password ~= oldpassword then
		return errors:wrap("密码错误")
	end

	user.password = newpassword

	self:db():updateOne({_id=params._id}, user, resume)
	return errors:wrap(yield())
end

function user:api_setemail(params)
	if (not params._id) or (not params.email) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local email = params.email
	if not email:match("^[%w%._%-]+@[%w%.%-]+%.[%a]+$") or #email>50 then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({_id=params._id}, {email=email}, resume)
	return errors:wrap(yield())
end

function user:api_login(params) 
	if (not params.email) or (not params.password) then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}	
	end

	self:db():findOne({email=params.email}, resume)
	local err, data = yield()
	if not data then 
		return errors:wrap(err or "用户不存在", data)
	end

	if data.password ~= self:encodePassword(params.password) then
		return errors:wrap("密码错误")
	end

	return {error=errors.SUCCESS, data={token=createJWT(data), userInfo=data}}
end
	
function user:api_register(params)
	local err, params = self:validateQuery(params)
	if err then 
		return errors:wrap(err)
	end
	
	-- 查找用户名是否可用
	if websiteDB:api_getByName({websiteName=params.username}).data then
		return errors:wrap(errors:new("用户名已存在"))
	end
	
	-- 判断邮箱是否注册
	self:db():findOne({email = params.email}, resume)
	local err, data = yield()
	
	if data then 
		return errors:wrap(errors:new("Email is already register"))
	end
	
	-- 创建用户
	self:db():insertOne(nil, {
		username = params.username,
		password = self:encodePassword(params.password),
		email = params.email,
		cellphone = params.cellphone,
		joindate = ParaGlobal.GetDateFormat("yyyy-MM-dd"),
	}, resume)
	local err, userInfo = yield()
	if err then 
		return errors:wrap(err,data)
	end

	-- 创建个人站点
	websiteDB:create({name=params.username,userId=userInfo._id, desc="个人站点", categoryId=0, categoryName="个人站点"})

	return errors:wrap(nil, {token=createJWT(userInfo), userInfo=userInfo})
end

-- 通过用户ID获得用户信息
function user:api_getById(params)
	local userId = self:ensureAuthenticated()
	userId = params.userId or userId

	self:db():findOne({_id=userId}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end

	-- 精简信息
	local userInfo = {
		_id=data._id,
		username=data.username,
		email=data.email,
		cellphone=data.cellphone,
		sex=data.sex,
		githubId=data.githubId,
		githubToken=data.githubToken,
		portrait=data.portrait,
		comment=data.comment,
		company=data.company,
		location=data.location,
		joindate=data.joindate,		
	}
	return {error=errors.SUCCESS, data=userInfo}
end




