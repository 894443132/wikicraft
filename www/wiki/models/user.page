<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/21
]]


include_once("./abstract/base.page")
include_once("./website.page")
include_once("./website_domain.page")
include_once("./website_member.page")
include_once("./user_favorite.page")
include_once("./user_fans.page")
include_once("./user_trends.page")
include_once("./user_active.page")
include_once("./data_source.page")

-- local mem_cache = commonlib.gettable("WebServer.mem_cache"):GetInstance()

local user = inherit(models.abstract.base, gettable("models.user"))
user.db_name = "user"


function user:ctor()
	self:addfield("username", "string", false, 30)
	self:addfield("displayName", "string", false, 30)
	self:addfield("signature", "string")
	self:addfield("introduce", "string", false)
	self:addfield("email", "string", false, 30) -- private email, can be used to login
	self:addfield("password", "string", false, 256) -- hashed password
	self:addfield("cellphone", "string", false, 12) -- hashed password
	self:addfield("sex", "string", false, 12)
	self:addfield("dataSourceId", "number", false) -- 数据源ID  
	self:addfield("githubDS", "number", false) -- github 数据源是否开启  
	self:addfield("githubId", "number", false) -- github 
	self:addfield("githubToken", "table", false) -- github access token
	self:addfield("githubName", "string", false) -- github access token
	self:addfield("githubRepoName", "string", false) -- github access token
	self:addfield("portrait", "string", false, 200) -- picture url
	self:addfield("comment", "string", false, 300)
	self:addfield("company", "string", false, 30)
	self:addfield("location", "string", false, 50)
	self:addfield("joindate", "string", false, 30)
	self:addfield("isadmin", "boolean", false);
	self:addfield("favoriteCount", "number")   -- 收藏量
	self:addfield("fansCount", "number")  -- 粉丝数量
	self:addfield("websiteCount", "number") -- 作品数量
end

-- 发送邀请邮件
function user:api_inviteFriend(params) 
	if (not params.userId) or (not params.friendMail) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local par = {}
	-- par.to = params.friendMail
	par.to = "765485868@qq.com"
	par.subject = "wikicraft好友邀请"
	par.body = [[
		<div class="main-content">
			<p>你好，你的好友#username#真诚的将 wikicraft 推荐给你。</p>
			<p>wikicraft 是一款强大的网站构建平台。</p>
			<p>#username#的作品：</p>
			<p><a href="#">作品链接</a></p>
			<p><a href="#">作品链接</a></p>
			<div class="btn">点击注册</div>
		</div>
	]]
	
	util:sendEmail(par)
	
	return errors:wrap(nil)
end


function user:encodePassword(password)
	return ParaMisc.md5(password or "")
end

-- 旧接口兼容
function user:api_getminiprofile(params)
	if(not params._id) then
		-- `_id` is automatically injected if no other field is found. 
		self:ensureAuthenticated();
		params._id = request.userid;
	end
	local data = user._super.get(self, params);
	if(type(data) == "table") then
		-- never return password
		return {_id=data._id, joindate=data.joindate, location=data.location, displayName = data.displayName, picture = data.picture};
	end
end

-- 旧接口兼容
function user:get(params)
	if(not params._id) then
		-- `_id` is automatically injected if no other field is found. 
		self:ensureAuthenticated();
		params._id = request.userid;
	end
	local data = user._super.get(self, params);
	if(type(data) == "table") then
		-- never return password
		data.password = nil;
		-- hide non-owner fields
		if(data._id ~= request.userid) then
			data.email = nil;
			data.github_token = nil;
		end
	end
	return data;
end

-- 更新用户信息
function user:update(params) 
	self:ensureAuthenticated()
	local err, query = self:validateQuery(params)
	if err or (not query._id) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	if query then
		-- following field is forbidden to change by the user. 
		query.email = nil
		query.password = nil
		query.githubId = nil
		query.githubToken = nil
		query.githubName = nil
		query.isadmin = nil
	end

	self:db():updateOne({_id=query._id}, query, resume)

	return errors:wrap(yield())
end

-- 用户注销账号 
function user:api_deleteById(params) 
	-- 只能删除自己
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local userId = params.userId -- debug
	-- local userId = self:ensureAuthenticated()

	-- 删除用户所有站点
	local websiteDB = models.website:new()
	websiteDB:deleteUserWebsite(userId)
	-- 删除用户所有收藏
	local userFavoriteDB = models.user_favorite:new()
	userFavoriteDB:api_deleteByUserId({userId=params.userId})

	self:db():deleteOne({_id=userId}, resume)
	local err, data = yield() 
	
	return errors:wrap() 
end

-- 更新用户信息
function user:api_updateUserInfo(params)
	_, params = self:validateQuery(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.email = nil
	params.password = nil
	params.githubId = nil
	params.githubToken = nil
	params.githubName = nil
	params.isadmin = nil

	self:db():updateOne({_id=params._id}, params, resume)

	return errors:wrap(yield())
end

-- 邮箱验证1
function user:api_verifyEmailOne(params) 
	local userId = self:ensureAuthenticated()
	if not params.email then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=userId}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap(errors.USER_NOT_EXIST)
	end

	local url = "http://keepwork.com/wiki/verifyEmail"

	-- TODO 加时间限制
	mem_cache:set("verifyEmail" .. tostring(userId), params.email)

	local par = {}
	par.to = params.email
	par.subject = "邮箱验证"
	par.body = [[
		<div class="main-content">
			<p>打开如下链接进行邮箱验证:</p>
			<p><a href="%s">%s</a></p>
		</div>
	]]
	par.body = string.format(par.body, url, url)
	util:sendEmail(par)
	
	return errors:wrap(nil)
end

-- 邮箱验证2
function user:api_verifyEmailTwo(params)
	local userId = self:ensureAuthenticated()

	local email = mem_cache:get("verifyEmail" .. tostring(userId))
	
	self:db():updateOne({_id=userId, {email=email}, resume)
	
	return errors:wrap(yield())
end

-- 找回密码1
function user:api_findPwdOne(params) 
	if not params.email then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+email"]={params.email}}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap(errors.USER_NOT_EXIST)
	end
	local t = os.time()
	local key = tostring(t) .. math.random(10000)
	local url = "http://keepwork.com/wiki/findPwd?step=2&key=" .. key .. "&email=" 。。 params.email

	-- TODO 加时间限制
	mem_cache:set(params.email, key)

	local par = {}
	par.to = params.email
	par.subject = "keepwork找回密码"
	par.body = [[
		<div class="main-content">
			<p>打开如下链接进行密码重置:</p>
			<p><a href="%s">%s</a></p>
		</div>
	]]
	par.body = string.format(par.body, url, url)
	util:sendEmail(par)
	
	return errors:wrap(nil)
end

-- 找回密码2
function user:api_findPwdTwo(params)
	if (not params.email) or (not params.key) or (not params.password) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local key = mem_cache:get(params.email)
	if key ~= params.key then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local password = self:encodePassword(params.password)
	self:db():updateOne({["+email"]={params.email}}, {password=password}, resume)
	
	return errors:wrap(yield())
end

-- 更改密码
function user:api_changepw(params)
	local userId = self:ensureAuthenticated()
	if (not params.oldpassword) or (not params.newpassword) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=userId}, resume)
	local err, user = yield()
	
	if not user then 
		return errors:wrap(errors.NOT_FOUND)
	end
	
	local oldpassword = self:encodePassword(params.oldpassword)
	local newpassword = self:encodePassword(params.newpassword)
	if user.password ~= oldpassword then
		return errors:wrap("密码错误")
	end

	user.password = newpassword

	self:db():updateOne({_id=userId}, user, resume)
	return errors:wrap(yield())
end

-- 发邮件
function user:api_setemail(params)
	par = {}
	par.to = "765485868@qq.com"
	par.subject = "wikicraft email confirm"
	par.body = "<a href='localhost:8099/wiki/userFavoriteDB'>注册确认</a>"
	util:sendEmail(par)
	return "email"
	--[[
	if (not params._id) or (not params.email) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local email = params.email
	if not email:match("^[%w%._%-]+@[%w%.%-]+%.[%a]+$") or #email>50 then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({_id=params._id}, {email=email}, resume)
	return errors:wrap(yield())

	]]
end

-- 登录
function user:api_login(params) 
	if (not params.email) or (not params.password) then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}	
	end

	self:db():findOne({email=params.email}, resume)
	local err, data = yield()
	if not data then 
		return errors:wrap(err or "用户不存在", data)
	end

	if data.password ~= self:encodePassword(params.password) then
		return errors:wrap("密码错误")
	end
	
	local dataSourceDB = models.data_source:new()
	local dataSource = dataSourceDB:api_getByUserId({userId=data._id}).data
	if (not dataSource) or (#dataSource == 0) then
		dataSourceDB:api_linkInnerGitlab({userId=data._id, username=data.username})
	end
	data.dataSource = dataSource

	return {error=errors.SUCCESS, data={token=createJWT(data), userInfo=data}}
end
	
-- 注册
function user:api_register(params)
	-- 用户名 密码 邮箱为必填项
	if (not params.username) or (not params.password) then 
		return errors:wrap(err)
	end
	
	local websiteDB = models.website:new()
	-- 查找用户名是否可用
	if self:api_checkUsername({username=params.username}).data == 0 then
		return errors:wrap(errors:new("用户名已存在"))
	end
	
	-- 创建用户
	self:db():insertOne(nil, {
		username = params.username,
		displayName = params.username,
		password = self:encodePassword(params.password),
		 email = params.email,
		cellphone = params.cellphone,
		joindate = ParaGlobal.GetDateFormat("yyyy-MM-dd"),
		administrator = 0,
		favoriteCount=0,
		fansCount=0,
		websiteCount=0,
	}, resume)
	local err, userInfo = yield()
	if err then 
		return errors:wrap(err,data)
	end
	
	request.userid = userInfo._id

	-- 创建个人站点
	--[[
		websiteDB:create({
			name=params.username,
			userId=userInfo._id, 
			username=params.username, 
			desc="个人站点", 
			categoryId=0, 
			categoryName="个人站点",
			favoriteCount=0,
		})
	]]

	local dataSourceDB = models.data_source:new()
	local dataSource = dataSourceDB:api_getByUserId({userId=userInfo._id}).data
	if (not dataSource) or (#dataSource == 0) then
		dataSourceDB:api_linkInnerGitlab({userId=userInfo._id, username=userInfo.username})
	end
	userInfo.dataSource = dataSource

	return errors:wrap(nil, {token=createJWT(userInfo), userInfo=userInfo})
end

function user:api_getUserDataSource(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local dataSourceDB = models.data_source:new()
	local dataSource = dataSourceDB:api_getByUserId({userId=params.userId}).data
	if (not dataSource) or (#dataSource == 0) then
		dataSourceDB:api_linkInnerGitlab({userId=params.userId})
	end
	
	return errors:wrap(nil, dataSource)
end

-- 获取用户信息
function user:api_getProfile()
	local userId = self:ensureAuthenticated()
	self:db():findOne({_id=userId}, resume)
	local err, data = yield()
	if not data then 
		return errors:wrap(nil)
	end

	data.dataSource = self:api_getUserDataSource({userId=userId}).data
	return errors:wrap(nil, data)
end

-- 通过用户ID获得用户信息
function user:api_getById(params)
	if not params.userId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	userId = params.userId

	self:db():findOne({_id=userId}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end

	data.dataSource = self:api_getUserDataSource(params).data
	return errors:wrap(nil, data)
end

-- 通过用户名获得用户信息
function user:api_getByName(params)
	if not params.username then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+username"]={params.username}}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	
	data.password = nil

	data.dataSource = self:api_getUserDataSource({userId=data._id}).data
	return errors:wrap(nil, data)
end

-- 通过email获得用户信息
function user:api_getByEmail(params)
	if not params.email then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+email"]={params.email}}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	
	data.password = nil

	data.dataSource = self:api_getUserDataSource({userId=data._id}).data
	return errors:wrap(nil, data)
end

-- 获得用户数量
function user:api_getCount(params)
	self:db():count({}, resume)
	
	return errors:wrap(yield())
end

-- 获得收藏数排序的用户列表
function user:api_getFavoriteSortList(params)
	local skip, limit = util:pagination(params)	
	
	local count = self:api_getCount().data
	self:db():find({["-favoriteCount"]={gt=-1, skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err then 
		return errors:wrap(err)
	end
	
	return errors:wrap(nil, {total=count, pageCount=util:getPageCount(count,limit), userList=data})
end

-- 获得用户信息和站点通过站点名
function user:api_getUserAndSiteBySitename(params)
	if not params.sitename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local websiteDB = models.website:new()
	local siteinfo = websiteDB:api_getByName({websiteName=params.sitename}).data
	if not siteinfo then
		return errors:wrap(errors.NOT_FOUND)
	end
	
	local userinfo = self:api_getById({userId=siteinfo.userId}).data
	if not userinfo then
		return  errors:wrap(errros.NOT_FOUND)
	end

	return errors:wrap(nil, {userinfo=userinfo, siteinfo=siteinfo})
end

-- 修改用户的站点数量
function user:updateWebsiteCount(userId, count)
	local user = self:api_getById({userId=userId}).data

	if not user then
		log("user not exist, userId:", userId)
		return
	end

	user.websiteCount = user.websiteCount or 0	
	self:db():updateOne({_id=userId}, {websiteCount=user.websiteCount+count}, resume)
	yield()
	
	return 
end

-- 修改用户的收藏数量
function user:updateFavoriteCount(userId, count)
	local user = self:api_getById({userId=userId}).data

	if not user then
		log("user not exist, userId:", userId)
		return
	end

	user.favoriteCount = user.favoriteCount or 0
	self:db():updateOne({_id=userId}, {favoriteCount=user.favoriteCount+count}, resume)
	yield()
	
	return 
end

-- 修改用户的粉丝数量
function user:updateFansCount(userId, count)
	local user = self:api_getById({userId=userId}).data

	if not user then
		log("user not exist, userId:", userId)
		return
	end
	
	user.fansCount = user.fansCount or 0		
	self:db():updateOne({_id=userId}, {fansCount=user.fansCount+count}, resume)
	yield()
	
	return 
end

-- 获取用户统计信息
function user:api_getStatics(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local websiteDB = models.website:new()
	local userFavoriteDB = models.user_favorite:new()

	local websiteCount = websiteDB:api_getCountByUserId({userId=params.userId}).data
	local favoriteCount = userFavoriteDB:api_getFavoriteWebsiteCountByUserId({userId=params.userId}).data
	local fansCount = userFavoriteDB:api_getFansCountByUserId({userId=params.userId}).data

	self:db():updateOne({_id=params.userId},{favoriteCount=favoriteCount, fansCount=fansCount, websiteCount=websiteCount}, resume)
	local err, data = yield()

	return errors:wrap(nil, {favoriteCount=favoriteCount, fansCount=fansCount, websiteCount=websiteCount})	
end

-- 检测用户名是否有效
function user:api_checkUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+username"]={params.username}}, resume)
	local err, data = yield()
	if data then
		return errors:wrap(nil, 0) -- 无效
	end

	local websiteDomainDB = models.website_domain:new()
	
	return websiteDomainDB:api_checkDomain({domain=params.username})	
end

-- 获取用户详细相关信息通过用户名
function user:api_getDetailByName(params)
	local skip, limit = util:pagination(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- 获取用户信息
	self:db():findOne({["+username"]={params.username}}, resume)
	local err, userinfo = yield()

	if not userinfo then
		return errors:wrap(nil, nil)
	end

	-- 获取创建的组织列表
	local websiteDB = models.website:new()
	websiteDB:db():count({["+userId+categoryId"]={userinfo._id, const.WEBSITE_TYPE_ORGANIZATION}}, resume)
	local err, selfOrganiztionTotal = yield()
	websiteDB:db():find({["+userId+categoryId"]={userinfo._id, const.WEBSITE_TYPE_ORGANIZATION, limit=limit}}, resume)
	local err, selfOrganiztionList = yield()
	local selfOrganizationObj = {total=selfOrganiztionTotal, siteList=selfOrganiztionList}
	
	-- 加入的组织
	local websiteMemberDB = models.website_member:new()
	local joinOrganizationObj = websiteMemberDB:api_getWebsiteListByUserId({userId=userinfo._id}).data	
	
	-- 获取热门作品
	local hotSiteObj = websiteDB:api_getSiteList({username=userinfo.username,sortBy="-favoriteCount"}).data	
	
	-- 获得全部站点
	local allSiteList = websiteDB:api_getAllByUsername({username=userinfo.username}).data

	-- 获得用户粉丝
	local userFansDB = models.user_fans:new()
	local fansObj = userFansDB:api_getFansByUserId({userId=userinfo._id}).data
	
	-- 获取用户动态
	local userTrendsDB = models.user_trends:new()
	local trendsObj = userTrendsDB:api_get({userId=userinfo._id}).data
	
	-- 获取活动记录
	local userActiveDB = models.user_active:new()
	local activeObj = userActiveDB:api_getByUserId({userId=userinfo._id}).data

	return errors:wrap(nil,{userinfo=userinfo, activeObj=activeObj, selfOrganizationObj=selfOrganizationObj, joinOrganizationObj=joinOrganizationObj, hotSiteObj=hotSiteObj, allSiteList=allSiteList, fansObj=fansObj, trendsObj=trendsObj})
end











