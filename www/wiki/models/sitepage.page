<?npl
--[[
Title: site page info
Author: wuxiangan
Date: 2017/04/13
]]
include_once("./abstract/base.page")

-- 暂时不用
local sitepage = inherit(models.abstract.base, gettable("models.sitepage"))
sitepage.db_name = "sitepage"

function sitepage:ctor() 
	self:addfield("username","string")         -- username
	self:addfield("sitename","string")         -- sitename
	self:addfield("pagename","string")         -- pagename
	self:addfield("url", "string")             -- url key
	self:addfield("access_url", "string")             -- keepwork url
	self:addfield("data_source_url", "string")        -- data_source_url
	self:addfield("tags", "string")            -- data_source_url
end

-- 添加记录
function sitepage:api_upsert(params)
	if (not params.username) or (not params.sitename) or (not params.pagename) or (not params.url) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():insertOne({["+url"]={params.url}}, params, resume)

	return errors:wrap(yield())
end

-- 提交到搜索引擎
function sitepage:submitToES(params)
end

-- 删除记录
function sitepage:api_delete(params)
	if (not params.username) or (not params.websiteName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():delete({["+username+websiteName"]={params.username, params.websiteName}}, resume)

	return errors:wrap(yield())
end

-- 获取站点页信息
function sitepage:api_getByUsername(params)
	if not params.username then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local pageinfoList = {}
	-- 获取站点信息
	local websiteDB = models.website:new()
	local siteList = websiteDB:api_getAllByUsername({username=params.username}).data or {}

	-- 获取站点的页面信息
	for _, site in ipairs(siteList) do
		site.pageinfo = self:api_get({websiteName=site.name, username=site.username, dataSourceId=site.dataSourceId or 0}).data or {}
		site.pageinfo = site.pageinfo.pageinfo
		pageinfoList[#pageinfoList+1] = site.pageinfo
	end
	
	-- 获取没有站点的页面信息	
	self:db():find({["+username+isExistSite"]={params.username, sitepage_SITE_NOT_EXIST}}, resume)
	local _, tmpList = yield()
	for _, pageinfo in ipairs(tmpList) do
		pageinfoList[#pageinfoList+1] = pageinfo.pageinfo
	end
	
	return errors:wrap(nil, {siteList=siteList, pageinfoList=pageinfoList})	
end

-- 获取站点页信息
function sitepage:api_get(params)
	if (not params.username) or (not params.websiteName) or (not params.dataSourceId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+websiteName+dataSourceId"]={params.username, params.websiteName, params.dataSourceId}}, resume)

	return errors:wrap(yield())
end


