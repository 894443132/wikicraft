<?npl
--[[
Title: table db
Author: wuxiangan
Date: 2017/07/09
]]

NPL.load("(gl)script/ide/Files.lua")

include_once("./abstract/base.page")

local tabledb = inherit(models.abstract.base, gettable("models.tabledb"))
tabledb.db_name = "tabledb"

local defaultTableDB = db

function tabledb:api_getTables(params)
	local tableNames = {}
	local databaseDir = WIKI_DB_PATH
	local files = commonlib.Files.Find(nil, databaseDir, 0, 500, "*.db", nil)
	for i, file in ipairs(files or {}) do
		tableNames[#tableNames+1] = string.match(file.filename,"(.*)%.")
	end
	return errors:wrap(nil, tableNames)
end

function tabledb:api_getIndexes(params)
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local tableName = params.tableName
	local table = defaultTableDB:collection(tableName)
	table:exec("SELECT name as indexName FROM indexes", resume(err, rows))
	local err, rows = yield()
	local indexes = {}
	for i, obj in pairs(rows) do
		for j, value in pairs(obj) do
			indexes[#indexes + 1] = value
		end
	end

	return indexes
end

function tabledb:api_getTableRecord(params)
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
	local skip, limit = util:pagination(params)
	table:find({_id={gt=0, skip=skip, limit=limit}}, resume)
	local _, records = yield()
	table:count({}, resume)
	local _, total = yield()
	return errors:wrap(nil, {total=total, records=records})
end

function tabledb:api_query(params)
	if not params.tableName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
	local skip, limit = util:pagination(params)
	local query = params.query or {}
	local key = ""
	local value = {}
	for k, v in pairs(query) do
		key = key .. "+" .. k
		value[#value+1] = v
	end
	local queryParams = {}
	if key ~= "" then
		queryParams[key] = value
	end
	table:count(queryParams, resume)
	local _, total = yield()

	value["skip"] = skip
	value["limit"] = limit
	table:find(queryParams, resume)
	local _, records = yield()

	return errors:wrap(nil,{total=total,records=records})
end


function tabledb:api_insert(params)
	if not params.tableName or params._id ~= nil then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local table = defaultTableDB[params.tableName]
	local record = params.record or {}

	table:insertOne(nil, record, resume)

	return errors:wrap(yield())
end

function tabledb:api_modify(params)

end
-- db manager
if false then
	local getTableRecord = function()
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end)
		-- local db_handle = TableDatabase:new():connect('D:/NPL/NPLProject/wikicraft/database/npl/', function() end)
		local tableName = params.tableName
		local skip = (params.page - 1) * params.pageSize
		local sqlStr = "select count(*) as count from Collection"
		local table = db_handle:collection(tableName)
		table:exec(sqlStr, function(err, data) resume(err, data) end)
		err, data = yield()
		local count = data[1].count
		sqlStr = string.format("select * from Collection limit %d, %d", skip, params.pageSize)
		table:exec(sqlStr, function(err, data) resume(err, data) end)
		err, data = yield()

		return {total=count, table = data}
	end

	add_action('wp_ajax_beautify',function()
		if(params.code) then
			local o = NPL.LoadTableFromString(params.code)
			if(o) then
				response:send({code=commonlib.serialize(o, true)})
				return
			end
		end
		response:send({})
	end)
	add_action('wp_ajax_tojson',function()
		local o = params.code and NPL.LoadTableFromString(params.code)
		if(o) then
			response:send(o)
		else
			response:status(404):send({})
		end
	end)
	-- db_handle:EnableSyncMode(true)
	add_action('wp_ajax_curd',function()
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end)
		local tableName = params.tableName
		local operation = params.operation
		local query = params.query
		local update = params.update
		local table = db_handle:collection(tableName)

		if (operation == "select") then
			table:find(query, function(err,rows) resume(err,rows) end)
		elseif (operation == "insert") then
			table:insertOne(query, update, function(err, rows) resume(err, rows) end)
		elseif (operation == "update") then
			table:updateOne(query, update, function(err, rows) resume(err, rows) end)
		elseif (operation == "replace") then
			table:replaceOne(query, update, function(err, rows) resume(err, rows) end)
		elseif (operation == "delete") then
			table:deleteOne(query, resume)
		else
			table:find(query, function(err,rows) resume(err,rows) end)
			-- return "parament error"
		end

		err, rows = yield()

		wp_send_json(rows)
	end)

	add_action('wp_ajax_removeIndex', function()
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end)
		--local db_handle = TableDatabase:new():connect('D:/NPL/NPLProject/wikicraft/database/npl/', function() end)
		local tableName = params.tableName
		local table = db_handle:collection(tableName)
		table:removeIndex({params.index}, function() resume() end)
		yield()
		wp_send_json(getIndexes())
	end)

	add_action('wp_ajax_getIndexes', function()
		wp_send_json(getIndexes())
	end)


	add_action('wp_ajax_tables', function()
		wp_send_json(getTables())
	end)

	add_action('wp_ajax_getTableRecord', function()
		--local db_handle = TableDatabase:new():connect(getDBPath(), function() end)
		wp_send_json(getTableRecord())
	end)

end

