<?npl
--[[
Title: org member
Author: wuxiangan
Date: 2016/11/07
]]

include_once("./abstract/base.page");
include_once("./website.page");

local website_works = inherit(models.abstract.base, gettable("models.website_works"))
website_works.db_name="website_works"

function website_works:ctor()
	self:addfield("websiteId", "number")      -- 组织名
	self:addfield("worksId", "number")        -- 组织内作品的ID
	-- self:addfield("worksStarCount", "number") -- 作品被关注的数量
	-- self:addfield("worksState", "number")     -- 热门 入围
	self:addfield("worksFlag", "number")     -- 热门 入围
	self:addfield("createDate", "string", false, 64);
	self:addfield("updateDate", "string", false, 64);
end

-- 通过websiteId删除
function website_works:api_deleteByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():delete({["+websiteId"]={params.websiteId}}, resume)
	
	return errors:wrap(yield())
end


-- 获取数量
function website_works:api_getCount(query)
	self:db():count(query, resume)
	local err, data = yield()
	
	return errors:wrap(err, data or 0)
end

-- 获得取作品列表
function website_works:api_get(query)
	self:db():find(query, resume)
	local err, data = yield()
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	
	local websiteDB = models.website:new()
	local siteInfoList = {}
	for _, obj in ipairs(data) do
		siteInfoList[#siteInfoList+1] = websiteDB:api_getById({websiteId=obj.worksId}).data
	end

	return {error=errors.SUCCESS, data=siteInfoList}
end

-- 获取站点作品数量
function website_works:api_getCountByWebsiteId(params)
	if not params.websiteId then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end
	
	self:db():count({["+websiteId"] = {params.websiteId}}, resume)
	
	return errors:wrap(yield())
end


-- 获取作品列表
function website_works:api_getByWebsiteId(params)
	if not params.websiteId then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end
	
	local skip, limit = util:pagination(params)	

	self:db():find({["+websiteId"]={params.websiteId, skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	
	local websiteDB = models.website:new()
	local siteInfoList = {}
	for _, obj in ipairs(data) do
		siteInfoList[#siteInfoList+1] = websiteDB:api_getById({websiteId=obj.worksId}).data
		siteInfoList[#siteInfoList].classifyInfo = obj
	end
	
	local total = self:api_getCountByWebsiteId(params).data 
	if not total then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	return {error=errors.SUCCESS, data={total=total, pageCount=util:getPageCount(total,limit), siteList=siteInfoList}}
end

-- 获取入围作品的数量
function website_works:api_getUpgradeCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_UPGRADE}}	
	return self:api_getCount(query)
end

-- 获取入围作品
function website_works:api_getUpgradeByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	local total = self:api_getUpgradeCountByWebsiteId(params).data
	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_UPGRADE,skip=skip, limit=limit}}	
	local siteObj = self:api_get(query)
	
	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total,limit), siteList=siteObj.data})
end

-- 获取热门作品的数量
function website_works:api_getHotCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_HOT}}	
	return self:api_getCount(query)
end

-- 获取热门作品
function website_works:api_getHotByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	local total = self:api_getHotCountByWebsiteId(params).data
	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_HOT,skip=skip, limit=limit}}	
	local siteObj = self:api_get(query)
	
	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total,limit), siteList=siteObj.data})
end

-- 获得最近加入的数量
function website_works:api_getLatestCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local startDate = params.startDate or ""
	local query = {["+websiteId-createDate"] = {params.websiteId, gt=startDate}}	
	return self:api_getCount(query)
end

-- 获取最近加入的作品
function website_works:api_getLatestByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local startDate = params.startDate or ""
	local skip, limit = util:pagination(params)
	local total = self:api_getLatestCountByWebsiteId(params).data
	local query = {["+websiteId-createDate"]={params.websiteId, gt=startDate, skip=skip, limit=limit}}
	local siteList = self:api_get(query).data
	
	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total, limit), siteList=siteList})
end

-- 创建站点作品
function website_works:create(params) 
	if (not params.websiteId) or (not params.worksId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	params.createDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.updateDate = params.createDate

	self:db():insertOne({["+websiteId+worksId"]={params.websiteId, params.worksId}}, params, resume)
	
	return errors:wrap(yield())
end

-- 更新
function website_works:api_updateById(params) 
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({_id=params._id}, params, resume)
	
	return errors:wrap(yield())
end
