<?npl
--[[
Title: org member
Author: wuxiangan
Date: 2016/11/07
]]

include_once("./abstract/base.page");
include_once("./user_works.page");

local website_works = inherit(models.abstract.base, gettable("models.website_works"))
website_works.db_name="website_works"

function website_works:ctor()
	self:addfield("websiteId", "number")      -- 站点ID
	self:addfield("worksUsername", "string")       -- 作品作者
	self:addfield("worksTitle", "string")     -- 作品标题
	self:addfield("worksName", "string")      -- 作品名
	self:addfield("worksUrl", "string")       -- 作品容器页面url
	self:addfield("worksLogo", "string")      -- 作品logo
	self:addfield("worksDesc", "string")      -- 作品描述
	self:addfield("worksState", "string")     -- 作品状态
	self:addfield("worksFlag", "number")      -- 热门 入围
	self:addfield("visitCount", "number")     -- 该组织的点击量
	self:addfield("createDate", "string", false, 64)
	self:addfield("updateDate", "string", false, 64)
end

-- 创建站点作品
function website_works:api_upsert(params) 
	if (not params.websiteId) or (not params.worksUrl) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.createDate = params.createDate or params.updateDate
	
	self:db():insertOne({["+websiteId+worksUrl"]={params.websiteId, params.worksUrl}}, params, resume)
	
	return errors:wrap(yield())
end

-- 移除作品
function website_works:api_deleteById(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():deleteOne({_id=params._id}, resume)

	return errors:wrap(yield())
end

-- 通过websiteId删除
function website_works:api_deleteByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():delete({["+websiteId"]={params.websiteId}}, resume)
	
	return errors:wrap(yield())
end

-- 提交作品申请
function website_works:api_submitWorksApply(params)
	if (not params.websiteId) or (not params.worksUrl) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.worksState = const.WEBSITE_WORKS_STATE_APPLY
	self:db():insertOne({["+websiteId+worksUrl"]={params.websiteId, params.worksUrl}}, params, resume)

	return errors:wrap(yield())
end

-- 同意作品申请
function website_works:api_agreeWorksApply(params)
	params.worksState = const.WEBSITE_WORKS_STATE_NORMAL
	
	return self:api_upsert(params) 
end

-- 获取作品申请列表
function website_works:api_getApplyByWebsiteId(params)
	if (not params.websiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local skip, limit = util:pagination(params)
	self:db():find({["+websiteId+worksState"] = {params.websiteId, const.WEBSITE_WORKS_STATE_APPLY, skip=skip, limit=limit}}, resume)
	local _, worksList = yield()
	
	self:db():count({["+websiteId+worksState"] = {params.websiteId, const.WEBSITE_WORKS_STATE_APPLY}}, resume)
	local _, total = yield()

	return errors:wrap(nil, {total=total, worksList=worksList})
end

-- 获取站点作品数量
function website_works:api_getCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():count({["+websiteId+worksState"] = {params.websiteId, const.WEBSITE_WORKS_STATE_NORMAL}}, resume)
	
	return errors:wrap(yield())
end


-- 获取作品列表
function website_works:api_getByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local total = self:api_getCountByWebsiteId(params).data or 0	
	local skip, limit = util:pagination(params)	

	self:db():find({["+websiteId+worksState"]={params.websiteId, const.WEBSITE_WORKS_STATE_NORMAL, skip=skip, limit=limit}}, resume)
	local _, worksList = yield()

	return errors:wrap(nil, {total=total, worksList=worksList})
end

-- 获取作品列表通过url
function website_works:api_getByWorksUrlList(params)
	if (not params.websiteId) or (not params.worksUrlList) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local worksList = {}
	for _, worksUrl in ipairs(params.worksUrlList) do
		self:db():findOne({["+websiteId+worksUrl"]={params.websiteId, worksUrl}}, resume)
		local _, works = yield()
		worksList[#worksList+1] = works
	end

	return errors:wrap(nil, {total=#worksList, worksList=worksList})
end

-- 获取数量
function website_works:api_getCount(query)
	self:db():count(query, resume)
	local err, data = yield()
	
	return errors:wrap(err, data or 0)
end

-- 获得取作品列表
function website_works:api_get(query)
	self:db():find(query, resume)
	local err, data = yield()
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	
	return errors:wrap(nil, data)
end


-- 获取入围作品的数量
function website_works:api_getUpgradeCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_UPGRADE}}	
	return self:api_getCount(query)
end

-- 获取入围作品
function website_works:api_getUpgradeByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	local total = self:api_getUpgradeCountByWebsiteId(params).data
	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_UPGRADE,skip=skip, limit=limit}}	
	local siteObj = self:api_get(query)
	
	return errors:wrap(nil, {total=total, worksList=siteObj.data})
end

-- 获取热门作品的数量
function website_works:api_getHotCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_HOT}}	
	return self:api_getCount(query)
end

-- 获取热门作品
function website_works:api_getHotByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	local total = self:api_getHotCountByWebsiteId(params).data
	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_HOT,skip=skip, limit=limit}}	
	local siteObj = self:api_get(query)
	
	return errors:wrap(nil, {total=total, worksList=siteObj.data})
end

-- 获得最近加入的数量
function website_works:api_getLatestCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local startDate = params.startDate or ""
	local query = {["+websiteId-createDate"] = {params.websiteId, gt=startDate}}	
	return self:api_getCount(query)
end

-- 获取最近加入的作品
function website_works:api_getLatestByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local startDate = params.startDate or ""
	local skip, limit = util:pagination(params)
	local total = self:api_getLatestCountByWebsiteId(params).data
	local query = {["+websiteId-createDate"]={params.websiteId, gt=startDate, skip=skip, limit=limit}}
	local worksList = self:api_get(query).data
	
	return errors:wrap(nil, {total=total, worksList=worksList})
end

























