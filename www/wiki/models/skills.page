<?npl
--[[
Title: skills of users
Author: ZhengJiabiao
Date: 2018/1
Desc: skills in profiles.
]]


include_once("./abstract/base.page")
include_once("./elasticsearch.page")
include_once("./user.page")
include_once("./validators.page")


local skills = inherit(models.abstract.base, gettable("models.skills"))
skills.db_name = "skills"
local validators = models.validators:new()
local es = models.elasticsearch:new()
es:connect({index="kw_skills"})


function skills:ctor()
    self:addfield("title", "string", false, 30)
    self:addfield("username", "string", false, 30)
    self:addfield("level", "number", false, 1)
    self:addfield("likedCount", "number", false, 1)
    self:addfield("usersLiked", "table", false, 10000)
end


function skills:api_insert(params)
    -- ensureAuthenticated()
    local skill, is_params_error, message = self:insert_validator(params)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end
    self:db():insertOne({["+username+title"] = {skill.username, skill.title}}, skill, resume)
    local err, result = yield()
    if (result) then
        -- params.id = result._id
        -- self:insert_to_es(params)
        result.likedCount = result.likedCount or 0
        result.usersLiked = nil
        result._id = nil
    end
    
    return errors:wrap(err, result)
end


function skills:insert_validator(params)
    local clean_data = {}
    local required_fields = {"username", "title", "level", "works"}
    local are_they_sensitive_fields = {"title"}
    local fields_length = {username = 30, title = 30}
    local fields_range = {level = {gte = 0, lte = 5}}
    local index_fields_and_model_instance = {
        index_fields = {"username", "title"},
        model_instance = self
    }
    local user_model_instance = models.user:new()
    local validate_tasks = {
        {
            validator = validators.required_fields_validator,
            condition = required_fields
        }, {
            validator = validators.sensitive_words_validator,
            condition = are_they_sensitive_fields
        }, {
            validator = validators.fields_length_validator,
            condition = fields_length
        }, {
            validator = validators.users_existence_validator,
            condition = user_model_instance
        }, {
            validator = validators.number_range_validator,
            condition = fields_range
        }, {
            validator = validators.existence_validator,
            condition = index_fields_and_model_instance
        }
    }
    validators:add_validate_tasks(validate_tasks, params)
    local is_params_error, message = validators:get_validate_result()

    -- parameters filter
    if (not is_params_error) then
        clean_data = {
            title = params.title,
            username = params.username,
            level = params.level,
            usersLiked = {},
            likedCount = 0,
        }
    end

    return clean_data, is_params_error, message
end


function skills:api_update(params)
    -- ensureAuthenticated()
    local skill, is_params_error, message = self:insert_validator(params)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end
    self:db():updateOne({["+username+title"]={skill.username, skill.title}}, {level=skill.level}, resume)
    local err, result = yield()
    if (result) then
        -- params.id = result._id
        -- self:update_to_es(params)
        result.likedCount = result.likedCount or 0
        result.usersLiked = nil
        result._id = nil
    end
    return errors:wrap(err, result)
end


function skills:update_validator(params)
    local clean_data = {}
    local required_fields = {"username", "title", "level", "works"}
    local fields_range = {level = {gte = 0, lte = 5}}
    local validate_tasks = {
        {
            validator = validators.required_fields_validator,
            condition = required_fields
        }, {
            validator = validators.number_range_validator,
            condition = fields_range
        }
    }
    validators:add_validate_tasks(validate_tasks, params)
    local is_params_error, message = validators:get_validate_result()

    if (not is_params_error) then
        clean_data = {
            title = params.title,
            username = params.username,
            level = params.level
        }
    end

    return clean_data, is_params_error, message
end


function skills:api_like(params)
    -- ensureAuthenticated()
    local skill, is_params_error, message = self:like_validator(params)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end
    self:db():findOne({["+username+title"]={skill.username, skill.title}}, resume)
    local err, result = yield()
    if (result) then
        result.visitor = skill.visitor
        result.usersLiked = result.usersLiked or {}
        err, result, message = self:update_liked_data(result)
        if (message) then
            return response:status(404):send({error={message=message,status=404}})
        end
        result.usersLiked = nil -- do not show usersLiked unless necessary
        result._id = nil
    end
   
    return errors:wrap(err, result)
end


function skills:update_liked_data(params)
    usersLiked = params.usersLiked
    local liked = true
    local err, result, message
    -- to check whether the visitor likes or dislike this skill
    local is_visitor_in_usersLiked, position = self:is_visitor_in_usersLiked(params.visitor, usersLiked)
    if (is_visitor_in_usersLiked) then
        table.remove(usersLiked, position)
        liked = false
    else
        usersLiked[(#usersLiked) + 1] = params.visitor
    end
    local likedCount = #usersLiked
    local data_to_update = {
        likedCount = likedCount,
        usersLiked = usersLiked
    }
    -- to limit likedCount
    if (likedCount <= 10000) then
        self:db():updateOne({["+username+title"]={params.username, params.title}}, data_to_update, resume)
        err, result = yield()
        -- if (result) then
        --     data_to_update.id = result._id
        --     self:update_liked_in_es(data_to_update)
        -- end
        result.liked = liked
    else
        message = "likedCount over limit(10000)"
    end
    return err, result, message
end


function skills:like_validator(params)
    local clean_data = {}
    local required_fields = {"username", "title", "visitor"}
    local validate_tasks = {
        {
            validator = validators.required_fields_validator,
            condition = required_fields
        }
    }
    validators:add_validate_tasks(validate_tasks, params)
    local is_params_error, message = validators:get_validate_result()
    if (not is_params_error) then
        clean_data = {
            title = params.title,
            username = params.username,
            visitor = params.visitor
        }
    end
    return clean_data, is_params_error, message
end


function skills:api_getLikedStatus(params)
    local required_fields = {"username", "visitor"}
    local is_params_error, message = validators.required_fields_validator(params, required_fields)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end

    self:db():find({["+username"] = {params.username}},resume)
    local err, skills = yield()
    if (skills) then
        for i, skill in ipairs(skills) do
            skill.usersLiked = skill.usersLiked or {}
            skill.likedCount = skill.likedCount or #(skill.usersLiked)
            skill.liked = self:is_visitor_in_usersLiked(params.visitor, skill.usersLiked)
            skill.usersLiked = nil  -- do not show usersLiked unless necessary
            skill._id = nil
        end
    end
    return errors:wrap(err, skills)
end


function skills:api_getDetail(params)
    local required_fields = {"username", "title", "visitor"}
    local is_params_error, message = validators.required_fields_validator(params, required_fields)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end

    self:db():findOne({["+username+title"]={params.username, params.title}}, resume)
    local err, result = yield()
    -- wrap the result
    if (result) then
        local usersLiked = {}
        local limit = 50
        local liked, position = self:is_visitor_in_usersLiked(params.visitor, result.usersLiked)
        if (liked) then
            usersLiked[1] = table.remove(result.usersLiked, position)
            limit = 49
        end
        if (#result.usersLiked < limit) then limit = #result.usersLiked end
        for i = 1, limit do
            usersLiked[(#usersLiked) + 1] = result.usersLiked[(#result.usersLiked) - (limit - i)]
        end
        result.usersLiked = usersLiked
        result.liked = liked
        result.likedCount = result.likedCount or 0
        result._id = nil
    end
    return errors:wrap(err, result)
end


function skills:api_delete(params)
    -- ensureAuthenticated()
    local required_fields = {"username", "title"}
    local is_params_error, message = validators.required_fields_validator(params, required_fields)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end

    self:db():findOne({["+username+title"]={params.username, params.title}}, resume)
    local _, skill = yield()

    if (skill) then
        self:db():deleteOne({_id=skill._id}, resume)
        local err, result = yield()
        -- params.id = skill._id
        -- self:delete_in_es(params)
    end

    return errors:wrap(err, result)
end


-- to check whether the visitor is in array usersLiked
-- it will return the position if visitor is in usersLiked
function skills:is_visitor_in_usersLiked(visitor, usersLiked)
    for i, userLiked in ipairs(usersLiked) do
        if (visitor == userLiked) then return true, i end
    end
    return false, nil
end


function skills:insert_to_es(params)
    local skill = {
        type = "skills",
        id = params.id,
        username = params.username,
        level = params.level,
        title = params.title,
        works = params.works,
        usersLiked = {},
        likedCount = 0
    }

    return es:insertOne(skill)
end


function skills:update_to_es(params)
    local skill = {
        type = "skills",
        id = params.id,
        level = params.level,
        works = params.works
    }

    return es:updateOne(skill)
end


function skills:update_liked_in_es(params)
    local skill = {
        type = "skills",
        id = params.id,
        likedCount = params.likedCount,
        usersLiked = params.usersLiked
    }
    return es:updateOne(skill)
end


function skills:delete_in_es(params)
    local skill = {
        type = "skills",
        id = params.id
    }

    return es:deleteOne(skill)
end


function skills:api_search(params)
    local clean_params, is_params_error, message = self:search_validator(params)
    if (is_params_error) then
        return response:status(404):send({error={message=message,status=404}})
    end
    local search_result = es:search(clean_params)
    local rcode = search_result.data.rcode
    local wrapped_result = {}
    if (rcode == 200) then
        wrapped_result = self:wrap_search_result(search_result)
    else
        wrapped_result = result.data.data
    end
    return wrapped_result
end


function skills:search_validator(params)
    local clean_data = {}
    local required_fields = {"q"}
    local validate_tasks = {
        {
            validator = validators.required_fields_validator,
            condition = required_fields
        }
    }
    validators:add_validate_tasks(validate_tasks, params)
    local is_params_error, message = validators:get_validate_result()
    if (not is_params_error) then
        clean_data = {
            type = "skills",
            q = params.q,
            fields = {"title"},
            size = tonumber(params.size) or 500,
            from = tonumber(params.from),
            sort = params.sort,
            highlight = tonumber(params.highlight) or 1
        }
        if (clean_data.size > 500) then clean_data.size = 500 end
    end
    return clean_data, is_params_error, message
end


function skills:wrap_search_result(result)
    local wrapped_result = {}
    local rcode = result.data.rcode

    -- 封装返回数据
    wrapped_result = {
        timed_out = result.data.data.timed_out,
        took = result.data.data.took,
        total = result.data.data.hits.total,
        status = rcode
    }

    local hits = {}
    for i, hit in ipairs(result.data.data.hits.hits) do
        local work = {}
        for j, work_link in ipairs(hit._source.works) do
            work = {
                access_url = work_link,
                username = hit._source.username,
                skill = hit._source.title
            }

            hits[#hits + 1] = work
        end
    end
    wrapped_result.hits = hits
    return wrapped_result
end


