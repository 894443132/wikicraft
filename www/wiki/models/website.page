<?npl
--[[
Title: website of a user
Author: wuxiangan
Date: 2016/10/10
]]
include_once("./abstract/base.page");
include_once("./website_pages.page");
include_once("./website_template_style.page");
include_once("./website_template_config.page");

local website = inherit(models.abstract.base, gettable("models.website"));

website.db_name = "website";
-- max items per user
website.max_items_per_user = 10;

function website:ctor()
	self:addfield("name", "string", true, 30);
	self:addfield("userId", "number", false)
	self:addfield("desc", "string", false, 240);
	self:addfield("domain", "string", false, 30);
	self:addfield("url","string", true, 100);
	self:addfield("tags","string", false, 300);
	self:addfield("logoUrl", "string", false, 120);
	self:addfield("categoryId","number", false, nil, 1);
	self:addfield("categoryName","string", false, 32);
	self:addfield("templateId","number", false, nil, 1);
	self:addfield("templateName","string", false, 32);
	self:addfield("styleId","number", false, nil, 1);
	self:addfield("styleName","string", false, 32);
	self:addfield("keywords", "string", false, 100);
	self:addfield("teamwork", "string", false, 100);
	self:addfield("store", "string", false, 200);
	self:addfield("fork", "string", false, 200);
	self:addfield("createDate", "string", false, 64);
	self:addfield("updateDate", "string", false, 64);
	self:addfield("starCount", "number");
	self:addfield("private", "number");	
	self:addfield("memberCount", "number");
	self:addfield("visitNum", "number");
	self:addfield("pageNum", "number");
end

-- 获取站点
function website:get(params)
	local query = util:formatQuery(params)
	query.name = params and params.name  -- primary key

	log(query)

	self:db():find(query, resume);
	local err, data = yield();
	
	if err then
		return errors:wrap(err, data);
	end

	return {error=errors.SUCCESS, data=data};
end

-- 创建站点
function website:create(params) 
	params.createDate = ParaGlobal.GetDateFormat("yyyy-MM-dd");
	local err, params = self:validateQuery(params)
	if err then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne({name=params.name}, params, resume);	
	local err, site = yield()

	if err then
		return {error=errors.REQUEST_PARAMS_ERROR, data=site}
	end

	-- create index page by template content 	
	local website_pages_db = models.website_pages:new()
	-- local template_style_db = models.website_template_style:new()
	-- local data = template_style_db:api_getIndexPage({categoryId=params.categoryId, templateId=params.templateId,styleId=params.styleId})
	local template_config_db = models.website_template_config:new()
	local data = template_config_db:api_getTemplatePage({categoryId=params.categoryId, templateId=params.templateId,styleId=params.styleId})
	
	local page = {name="index"}
	page.url = '/' ..  params.name .. '/' .. page.name
	page.websiteName = params.name
	page.content = data.data or ""
	website_pages_db:create(page)
			
	return {error=errors.SUCCESS, data=site}
end

-- 删除站点
function website:delete(params) 
	local site = self:get(params);
	if (not site.data) or (not site.data[1]) then
		return self:get();
	end
	
	site = site.data[1]

	self._super.delete(self, params);
	local website_pages = models.website_pages:new();
	-- 删除该网站上所有页
	website_pages:db():delete({websiteName=site.name});

	return self:get();
end

-- 更新站点
function website:update(params) 
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd");
	local err, params = self:validateQuery(params)
	if err then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({name=params.name}, params, resume);
	local err, data = yield()
	return self:get();
end

-- 获得用户站点列表
function website:api_getWebsiteListByUserId() 
	local userId = self:ensureAuthenticated()
	self:db():find({userId=userId}, resume)
	
	return errors:wrap(yield())
end

-- 通过站点名获得站点
function website:api_getByName(params)
	if not params.websiteName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	self:db():findOne({name=params.websiteName}, resume)
	local err, data = yield()
	
	return errors:wrap(err, data)		
end

-- 通过站点ID获得站点
function website:api_getById(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	self:db():findOne({_id=params.websiteId}, resume)

	return errors:wrap(yield())		
end

-- 增加访问计数
function website:api_addVisitNum(params)
	if not params.websiteName then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({name=page.websiteName}, resume);
	local err, site = yield();
	if not site then
		return {error=errors.SERVER_INNER_ERROR, data=nil};
	end

	site.visitNum = site.visitNum + 1
	self:update(site)
		
	return {error=errors.SUCCESS}		
end

-- 获得建站历史
function website:api_getHistoryListByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local skip, limit = util:pagination(params)	
	self:db():find({["+userId-createDate"]={params.userId, skip=skip, limit=limit}}, resume)
	return errors:wrap(yield())
end


