<?npl
--[[
Title: data_source
Author: wuxiangan
Date: 2016/10/21
]]


include_once("./abstract/base.page")
include_once("./user.page")
include_once("./site_data_source.page")

local data_source = inherit(models.abstract.base, gettable("models.data_source"))
data_source.db_name = "data_source"

local innerGitlabName = const.DEFAULT_DATA_SOURCE_NAME

function data_source:ctor()
	self:addfield("username", "string")            -- 用户名 
	self:addfield("name", "string")                -- 数据源名
	self:addfield("type", "string")                -- 类型
	self:addfield("dataSourceUserId", "number")    -- 数据源UserID 
	self:addfield("dataSourceUsername", "string")  -- 数据源用户名
	self:addfield("dataSourceToken", "string")     -- 数据源ID
	self:addfield("apiBaseUrl", "string")          -- api url prefix
	self:addfield("rawBaseUrl", "string")          -- raw url prefix
end


-- 创建数据源
function data_source:api_upsert(params)
	if (not params.username) or (not params.name) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne({["+username+name"]={params.username,params.name}}, params, resume)

	return errors:wrap(yield())
end

-- 删除用户数据源
function data_source:api_deleteById(params)
	if not params.id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():deleteOne({_id=params.id}, resume)

	return errors:wrap(yield())
end

-- 获取数据源
function data_source:api_getById(params)
	if not params.id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=params.id}, resume)
	
	return errors:wrap(yield())
end

-- 通过数据源名获取
function data_source:api_getByName(params)
	if (not params.username) or (not params.name) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+name"]={params.username, params.name}}, resume)
	
	return errors:wrap(yield())
end

-- 获取用户的数据源
function data_source:api_getByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():find({["+username"]={params.username}}, resume)
	
	return errors:wrap(yield())
end

-- 添加github数据源
function data_source:api_setGithubDataSource(params)
	if (not params.name) or (not params.dataSourceToken) or (not params.username) or (not params.type) or (not params.apiBaseUrl) or (not params.rawBaseUrl) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.apiBaseUrl = params.apiBaseUrl or "https://api.github.com"
	local headers = {["User-Agent"]="Satellizer",["Accept"]="application/vnd.github.full+json", ["Authorization"]= " token " .. params.dataSourceToken}
	
	System.os.GetUrl({
		url= params.apiBaseUrl .. "/user", 
		headers=headers,
		method = "GET",
		json = true,
	}, resume)
	local code, data = yield()
	if code ~= 200 then
		return errors:wrap(errors.SERVER_INNER_ERROR, {message="request three service resource failed!!!"})
	end
	data =data.data
	params.dataSourceUserId = data.id
	params.dataSourceUsername = data.login
	self:db():insertOne({["+username+name"]={params.username, params.name}}, params, resume)
	local _, data = yield()
	if not data then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end
	
	return errors:wrap(nil, data)
end


-- 设置gitlab数据源
function data_source:api_setGitlabDataSource(params)
	if (not params.name) or (not params.dataSourceToken) or (not params.username) or (not params.type) or (not params.apiBaseUrl) or (not params.rawBaseUrl) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local headers = {['PRIVATE-TOKEN']= params.dataSourceToken}
	
	-- 不存在创建用户
	System.os.GetUrl({
		url= params.apiBaseUrl .. "/user", 
		headers=headers,
		method = "GET",
		json = true,
	}, resume)
	local code, data = yield()
	if code ~= 200 then
		return errors:wrap(errors.SERVER_INNER_ERROR, {message="request three service resource failed!!!"})
	end
	data = data.data
	params.dataSourceUserId = data.id
	params.dataSourceUsername = data.username
	self:db():insertOne({["+username+name"]={params.username, params.name}}, params, resume)
	local _, data = yield()
	
	if not data then
		return errors:wrap(errors.SERVER_INNER_ERROR, {message="table db operator failed"})
	end
	
	return errors:wrap(nil, data)
end

-- 设置数据源
function data_source:api_setDataSource(params) 
	if not params.type then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if params.type == const.DATA_SOURCE_TYPE_GITHUB then
		return self:api_setGithubDataSource(params)
	elseif params.type == const.DATA_SOURCE_TYPE_GITLAB then
		return self:api_setGitlabDataSource(params)
	else 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	return errors:wrap()
end

-- 获取内部gitlab数据源
function data_source:api_getInnerGitlabByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+name"]={params.username, innerGitlabName}}, resume)

	return errors:wrap(yield())
end

-- 开启内部gitlab数据源
function data_source:api_createInnerGitlab(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local username = params.username
	-- 是否已存在
	local ds = self:api_getInnerGitlabByUsername(params).data

	-- 不存在创建
	if not ds then
		params.name = "gitlab_" .. (WIKI_ENV or "") .. "_" .. (params.name or params.username)
		params.username = params.name
		params.email = params.name .. '@paraengine.com'
		params.password = params.password or tostring(os.time())
		params.confirm = false

		local adminToken = KEEPWORK["config"]["default"]["threeService"]["gitlab"]["token"]
		local gitlabHost = KEEPWORK["config"]["default"]["threeService"]["gitlab"]["host"]
		local urlPrefix = "http://" .. gitlabHost .. "/api/v4"
		local rawPrefix = "http://" .. gitlabHost

		-- 获取用户
		System.os.GetUrl({
			url= urlPrefix .. "/users?username=" .. params.username, 
			headers={['PRIVATE-TOKEN']= adminToken},
			method = "GET",
			json = true,
		}, resume)
		local code, data = yield()
		if code ~= 200 then
			LOG.std(nil, "error", "keepwork", data)
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end
		data = data.data or {}
		ds = {
			username = username,
			type = "gitlab",
			name = innerGitlabName,
			dataSourceUserId = nil,
			dataSourceUsername = params.username,
			enable = 1,
			apiBaseUrl = urlPrefix,
			rawBaseUrl = rawPrefix,
		}

		-- 不存在创建用户
		if not data or #data == 0 then 
			System.os.GetUrl({
				url= urlPrefix .. "/users", 
				headers={['PRIVATE-TOKEN']= adminToken},
				method = "POST",
				form = params,
				json = true,
			}, resume)
			local code, data = yield()
			if code ~= 201 then
				LOG.std(nil, "error", "keepwork", data)
				return errors:wrap(errors.SERVER_INNER_ERROR)
			end
			ds.dataSourceUserId = data.data.id
		else
			ds.dataSourceUserId = data[1].id
		end

		-- 获取token
		System.os.GetUrl({
			url=urlPrefix .. "/users/" .. tostring(ds.dataSourceUserId) .. "/impersonation_tokens",
			headers={['PRIVATE-TOKEN']= adminToken},
			method = "GET",
			json = true,
		}, resume)
		local code, data = yield()
		if code ~= 200 then
			LOG.std(nil, "error", "keepwork", data)
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end	
		data = data.data or {}
		for _, token in ipairs(data) do
			if not token.revoked and token.active then
				ds.dataSourceToken = token.token		
				break
			end
		end
		-- 没有有效token 则创建
		if not ds.dataSourceToken then 
			System.os.GetUrl({
				url=urlPrefix .. "/users/" .. tostring(ds.dataSourceUserId) .. "/impersonation_tokens",
				headers={['PRIVATE-TOKEN']= adminToken},
				method = "POST",
				form = {["name"]="keepwork", ["expires_at"]="2222-12-12", ["scopes"]={"api","read_user"}},
				json = true,
			}, resume)
			local code, data = yield()
			if code ~= 201 then
				LOG.std(nil, "error", "keepwork", data)
				return errors:wrap(errors.SERVER_INNER_ERROR)
			end	
			data = data.data or {}
			ds.dataSourceToken = data.token
		end
		-- 创建数据库记录
		self:db():insertOne({["+username+name"]={ds.username, ds.name}}, ds, resume)
		local _, dataSourceInfo = yield()
		LOG.std(nil, "error", "keepwork", dataSourceInfo)
		if not dataSourceInfo then
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end
		return errors:wrap(nil, dataSourceInfo)
	end 

	return errors:wrap(nil, ds)
end

-- gitlab webhokk
function data_source:api_gitlabWebhook(params)
	params = params or {}	
	local dataSourceUserId = params.user_id
	local dataSourceUsername = params.user_name
	local projectId = params.project_id
	local projectName = params.project.name
	local lastCommitId = params.after

	if (not dataSourceUserId) or (not dataSourceUsername) or (not projectName) or (not projectId) then
		return
	end
	
	self:db():findOne({["+type+dataSourceUserId+dataSourceUsername"]={"gitlab", dataSourceUserId, dataSourceUsername}}, resume)
	local _, dataSource = yield()

	if not dataSource then
		return
	end
	local dataSourceId = dataSource._id
	local siteDataSourceDB = models.site_data_source:new()
	siteDataSourceDB:db():findOne({["+username+dataSourceId+projectName"]={dataSource.username, dataSourceId, projectName}}, resume)
	local _, siteDataSource = yield()
	if not siteDataSource then
		return 
	end

	siteDataSource.updateFlag = const.DATA_SOURCE_UPDATE_FLAG_NO_TRUST
	siteDataSource.lastCommitId = params.after
	
	siteDataSourceDB:db():updateOne({_id=siteDataSource._id}, siteDataSource, resume)
	yield()

	return
end

-- gitlab webhokk
function data_source:api_githubWebhook(params)
	local dataSourceUserId = params.repository.owner.id
	local dataSourceUsername = params.repository.owner.login

	if (not dataSourceUserId) or (not dataSourceUsername) then
		return
	end

	self:db():findOne({["+type+dataSourceUserId+dataSourceUsername"]={"github", dataSourceUserId, dataSourceUsername}}, resume)
	local _, ds = yield()

	if not ds then
		return
	end
	
	ds.updateFlag = const.DATA_SOURCE_UPDATE_FLAG_NO_TRUST
	ds.lastCommitId = params.after
	
	self:db():updateOne({_id=ds._id}, ds, resume)
	yield()

	return
end

-- 获得记录
function data_source:api_get(params)
	local key = ""
	local value = {}

	if params.username then
		key = key .. "+username"
		value[#value+1] = params.username
	end
	
	if params.apiBaseUrl then
		key = key .. "+apiBaseUrl"
		value[#value+1] = params.apiBaseUrl
	end

	self:db():find({[key]=value}, resume)

	return errors:wrap(yield())
end


