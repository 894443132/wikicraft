<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/21
]]


include_once("./abstract/base.page")
-- include_once("./website.page")
-- include_once("./user.page")

local data_source = inherit(models.abstract.base, gettable("models.data_source"))
data_source.db_name = "data_source"


function data_source:ctor()
	self:addfield("userId", "number")   -- 用户ID 
	self:addfield("type", "number")     -- 类型
	self:addfield("dataSourceId", "number")  -- 数据源ID
	self:addfield("dataSourceUsername", "string")  -- 数据源用户名
	self:addfield("dataSourceToken", "string")  -- 数据源ID
	self:addfield("enable", "number")  -- 数据源ID
end


-- 创建数据源
function data_source:api_upsert(params)
	if (not params.userId) or (not params.type) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne({["+userId+type"]={params.userId,params.type}}, params, resume)

	return errors:wrap(yield())
end

-- 获取用户的数据源
function data_source:api_getByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():find({["+userId"]={params.userId}}, resume)
	
	return errors:wrap(yield())
end

-- 获取内部gitlab数据源
function data_source:api_getInnerGitlabByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+userId+type"]={params.userId, const.DATA_SOURCE_INNER_GITLAB}}, resume)

	return errors:wrap(yield())
end

function getInnerGitlabToken(params) 
	local ds = {
		userId = params.userId,
		type = const.DATA_SOURCE_INNER_GITLAB,
		dataSourceId = params.gitlabUserId,
		dataSourceUsername = params.username,
		--dataSourceToken = gitlabToken.token,
		enable = 1,
	}
	System.os.GetUrl({
		url="http://keepwork.com:9000/api/v4/users/" .. tostring(params.gitlabUserId) .. "/impersonation_tokens",
		headers={['PRIVATE-TOKEN']= params.token},
		method = "GET",
		json = true,
	}, function(code, msg, data)
		if code ~= 200 then
			return
		end	
		for _, token in ipairs(data) do
			if not token.revoked and token.active then
				ds.dataSourceToken = token.token		
				db.data_source:insertOne({["+userId+type"]={ds.userId,ds.type}}, ds, function() end)
				return
			end
		end
		-- 没有有效token 则创建
		System.os.GetUrl({
			url="http://keepwork.com:9000/api/v4/users/" .. tostring(params.gitlabUserId) .. "/impersonation_tokens",
			headers={['PRIVATE-TOKEN']= params.token},
			method = "POST",
			form = {["name"]="keepwork", ["expires_at"]="2222-12-12", ["scopes"]={"api","read_user"}},
			json = true,
		}, function(code, msg, data)
			if code ~= 201 then
				return
			end	
			ds.dataSourceToken = data.token
			db.data_source:insertOne({["+userId+type"]={ds.userId,ds.type}}, ds, function() end)
		end)
	end)
	
	return errors:wrap(nil)
end

-- 开启内部gitlab数据源
function data_source:api_linkInnerGitlab(params)
	if (not params.userId) or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	-- 是否已存在
	local ds = self:api_getInnerGitlabByUserId(params).data
		
	-- 不存在创建
	if not ds then
		params.name = "gitlab_" .. (params.name or params.username)
		params.username = params.name
		params.email = params.name .. '@paraengine.com'
		params.password = params.password or tostring(os.time())
		params.confirm = false

		local adminToken = "mveKpt6Mpe7BAks7tiBx"
		System.os.GetUrl({
			url="http://keepwork.com:9000/api/v4/users?username=" .. params.username, 
			headers={['PRIVATE-TOKEN']= adminToken},
			method = "GET",
			json = true,
		}, function(code, msg, data)
			if code ~= 200 then
				return
			end
			-- 不存在创建用户
			if not data or #data == 0 then 
				System.os.GetUrl({
					url="http://keepwork.com:9000/api/v4/users", 
					headers={['PRIVATE-TOKEN']= adminToken},
					method = "POST",
					form = params,
					json = true,
				}, function(code, msg, gitlabUser)
					-- log(gitlabUser)
					if code ~= 201 then
						return
					end
					api_getInnerGitlabToken({userId=params.userId, username=params.username, token=adminToken, gitlabUserId=gitlabUser.id})
				end)
			else
				api_getInnerGitlabToken({userId=params.userId, username=params.username, token=adminToken, gitlabUserId=data[1].id})
			end
		end)
	else 
		if ds.enable == 0 then
			ds.enable = 1
			self:api_upsert(ds)
		end
	end 

	return errors:wrap(nil)
end

-- 设置数据时候可用
function data_source:api_setDataSourceEnable(params)
	if (not params.userId) or (not params.type) or (params.enable) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	return self:api_upsert(params)	
end



