<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/21
]]


include_once("./abstract/base.page")
include_once("./user.page")

local data_source = inherit(models.abstract.base, gettable("models.data_source"))
data_source.db_name = "data_source"

local innerGitlabName = "内置gitlab"

function data_source:ctor()
	self:addfield("userId", "number")   -- 用户ID 
	self:addfield("name", "string")     -- 数据源名
	self:addfield("type", "string")     -- 类型
	self:addfield("dataSourceId", "number")  -- 数据源ID
	self:addfield("dataSourceUsername", "string")  -- 数据源用户名
	self:addfield("dataSourceToken", "string")  -- 数据源ID
	self:addfield("projectName", "string")  -- 项目名
	self:addfield("apiBaseUrl", "string")  -- api url prefix
	self:addfield("rawBaseUrl", "string")  -- raw url prefix
	self:addfield("enable", "number")  -- 数据源ID
end


-- 创建数据源
function data_source:api_upsert(params)
	if (not params.userId) or (not params.type) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():insertOne({["+userId+name"]={params.userId,params.name}}, params, resume)

	return errors:wrap(yield())
end

-- 删除用户数据源
function data_source:api_deleteById(params)
	if not params.dataSourceId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():deleteOne({_id=params.dataSourceId}, resume)

	return errors:wrap(yield())
end

-- 获取用户的数据源
function data_source:api_getByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():find({["+userId"]={params.userId}}, resume)
	
	return errors:wrap(yield())
end

-- 获取内部gitlab数据源
function data_source:api_getInnerGitlabByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+userId+name"]={params.userId, innerGitlabName}}, resume)

	return errors:wrap(yield())
end

function addInnerGitlab(dataSource)
	db.data_source:insertOne({["+userId+name"]={dataSource.userId,dataSource.name}},dataSource,	
		function(err, dataSourceInfo)	
			db.user:findOne({_id=dataSource.userId},
				function(err, userinfo)
					if (not userinfo.dataSourceId) or (userinfo.dataSourceId == 0) then
						userinfo.dataSourceId = dataSourceInfo._id
						db.user:updateOne({_id=dataSource.userId}, userinfo, function() end)
					end 
				end)
		end) 

end
function getInnerGitlabToken(params) 
	local ds = {
		userId = params.userId,
		type = "gitlab",
		name = innerGitlabName,
		dataSourceId = params.gitlabUserId,
		dataSourceUsername = params.username,
		--dataSourceToken = gitlabToken.token,
		enable = 1,
		apiBaseUrl = params.urlPrefix,
		rawBaseUrl = params.rawPrefix,
	}

	System.os.GetUrl({
		url=params.urlPrefix .. "/users/" .. tostring(params.gitlabUserId) .. "/impersonation_tokens",
		headers={['PRIVATE-TOKEN']= params.token},
		method = "GET",
		json = true,
	}, resume)

	local code, data = yield()
	if code ~= 200 then
		return
	end	
	data = data.data or {}
	for _, token in ipairs(data) do
		if not token.revoked and token.active then
			ds.dataSourceToken = token.token		
			addInnerGitlab(ds)
			return 
		end
	end
	-- 没有有效token 则创建
	System.os.GetUrl({
		url=params.urlPrefix .. "/users/" .. tostring(params.gitlabUserId) .. "/impersonation_tokens",
		headers={['PRIVATE-TOKEN']= params.token},
		method = "POST",
		form = {["name"]="keepwork", ["expires_at"]="2222-12-12", ["scopes"]={"api","read_user"}},
		json = true,
	}, function(code, msg, data)
		if code ~= 201 then
			return
		end	
		ds.dataSourceToken = data.token
		addInnerGitlab(ds)
		end)
	
	return errors:wrap(nil)
end

-- 开启内部gitlab数据源
function data_source:api_linkInnerGitlab(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local userDB = models.user:new()
	userDB:db():findOne({_id=params.userId}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end
	
	-- 是否已存在
	local ds = self:api_getInnerGitlabByUserId(params).data
	-- 不存在创建
	if not ds then
		params.name = "gitlab_" .. (params.name or userinfo.username)
		params.username = params.name
		params.email = params.name .. '@paraengine.com'
		params.password = params.password or tostring(os.time())
		params.confirm = false

		local adminToken = wiki_config().data_source.inner_gitlab.token
		local urlPrefix = "http://" .. wiki_config().data_source.inner_gitlab.host .. "/api/v4"
		local rawPrefix = "http://" .. wiki_config().data_source.inner_gitlab.host
		System.os.GetUrl({
			url= urlPrefix .. "/users?username=" .. params.username, 
			headers={['PRIVATE-TOKEN']= adminToken},
			method = "GET",
			json = true,
		}, function(code, msg, data)
			if code ~= 200 then
				return
			end
			-- 不存在创建用户
			if not data or #data == 0 then 
				System.os.GetUrl({
					url= urlPrefix .. "/users", 
					headers={['PRIVATE-TOKEN']= adminToken},
					method = "POST",
					form = params,
					json = true,
				}, function(code, msg, gitlabUser)
					-- log(gitlabUser)
					if code ~= 201 then
						return
					end
					getInnerGitlabToken({userId=params.userId, username=params.username,rawPrefix=rawPrefix, urlPrefix=urlPrefix, token=adminToken, gitlabUserId=gitlabUser.id})
				end)
			else
				getInnerGitlabToken({userId=params.userId, username=params.username, rawPrefix=rawPrefix, urlPrefix=urlPrefix, token=adminToken, gitlabUserId=data[1].id})
			end
		end)
	else 
		if ds.enable == 0 then
			ds.enable = 1
			self:api_upsert(ds)
		end
	end 

	return errors:wrap(nil)
end

-- 设置数据时候可用
function data_source:api_setDataSourceEnable(params)
	if (not params.userId) or (not params.type) or (params.enable) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	return self:api_upsert(params)	
end


-- 获取数据源api base url
function data_source:api_getApiBaseUrl(params)
	if not params.type then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if params.type == const.DATA_SOURCE_OUTER_GITHUB then 
		return "https://api.github.com"
	elseif params.type == const.DATA_SOURCE_INNER_GITLAB then
		return "http://git.keepwork.com/api/v4"
	else
		return ""
	end
end

-- 添加github数据源
function data_source:api_setGithubDataSource(params)
	if (not params.name) or (not params.dataSourceToken) or (not params.userId) or (not params.type) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.apiBaseUrl = params.apiBaseUrl or "https://api.github.com"
	local ds = {
		userId = params.userId,
		type = params.type,
		dataSourceToken = params.dataSourceToken,
		apiBaseUrl = params.apiBaseUrl, 
		name = params.name,
		enable = 1,
	}
	
	if params._id then
		self:db():updateOne({_id=params._id}, params, resume)
		return errors:wrap(yield())
	end
	
	self:db():findOne({["+userId+name"]={params.userId, params.name}}, resume)
	local err, data = yield()
	if data then
		self:db():updateOne({["+userId+name"]={params.userId, params.name}}, params, resume)
		return errors:wrap(yield())
	end

	local headers = {["User-Agent"]="Satellizer",["Accept"]="application/vnd.github.full+json", ["Authorization"]= " token " .. params.dataSourceToken}
	
	-- 不存在创建用户
	if not data or #data == 0 then 
		System.os.GetUrl({
			url= params.apiBaseUrl .. "/user", 
			headers=headers,
			method = "GET",
			json = true,
		}, function(code, msg, data)
			if code ~= 200 then
				log(data)
				return
			end
			ds.dataSourceId = data.id
			ds.dataSourceUsername = data.login
			db.data_source:insertOne({["+userId+type"]={ds.userId,ds.type}}, ds, function() end)
		end)
	else
		db.data_source:insertOne({["+userId+type"]={ds.userId,ds.type}}, ds, function() end)
	end
	
	return errors:wrap()
end

-- 设置gitlab数据源
function data_source:api_setGitlabDataSource(params)
	if (not params.name) or (not params.dataSourceToken) or (not params.userId) or (not params.type) or (not params.apiBaseUrl)then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local ds = {
		userId = params.userId,
		type = params.type,
		dataSourceToken = params.dataSourceToken,
		enable = 1,
		apiBaseUrl = params.apiBaseUrl,
		name = params.name,
	}

	if params._id then
		self:db():updateOne({_id=params._id}, params, resume)
		return errors:wrap(yield())
	end
	if data then
		self:db():updateOne({["+userId+name"]={params.userId, params.name}}, params, resume)
		return errors:wrap(yield())
	end

	local headers = {['PRIVATE-TOKEN']= params.dataSouceToken}
	
	-- 不存在创建用户
	if not data or #data == 0 then 
		System.os.GetUrl({
			url= params.apiBaseUrl .. "/user", 
			headers=headers,
			method = "GET",
			json = true,
		}, function(code, msg, data)
			-- log(data)
			if code ~= 200 then
				return
			end
			ds.dataSourceId = data.id
			ds.dataSourceUsername = data.username
			db.data_source:insertOne({["+userId+type"]={ds.userId,ds.type}}, ds, function() end)
		end)
	else
		db.data_source:insertOne({["+userId+type"]={ds.userId,ds.type}}, ds, function() end)
	end
	
	return errors:wrap()
end

-- 设置数据源
function data_source:api_setDataSource(params) 
	if not params.type then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if params.type == const.DATA_SOURCE_TYPE_GITHUB then
		return self:api_setGithubDataSource(params)
	elseif params.type == const.DATA_SOURCE_TYPE_GITLAB then
		return self:api_setGitlabDataSource(params)
	else 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	return errors:wrap()
end

-- 开启内部gitlab数据源
function data_source:api_createInnerGitlab(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	params.userId = tonumber(params.userId)
	
	local userDB = models.user:new()
	userDB:db():findOne({_id=params.userId}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end
	
	-- 是否已存在
	-- local ds = self:api_getInnerGitlabByUserId(params).data

	-- 不存在创建
	if not ds then
		params.name = "gitlab_" .. (params.name or userinfo.username)
		params.username = params.name
		params.email = params.name .. '@paraengine.com'
		params.password = params.password or tostring(os.time())
		params.confirm = false

		local adminToken = wiki_config().data_source.inner_gitlab.token
		local urlPrefix = "http://" .. wiki_config().data_source.inner_gitlab.host .. "/api/v4"
		local rawPrefix = "http://" .. wiki_config().data_source.inner_gitlab.host
		-- 获取用户
		System.os.GetUrl({
			url= urlPrefix .. "/users?username=" .. params.username, 
			headers={['PRIVATE-TOKEN']= adminToken},
			method = "GET",
			json = true,
		}, resume)
		local code, data = yield()
		if code ~= 200 then
			log(data)
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end
		data = data.data or {}
		local ds = {
			userId = params.userId,
			type = "gitlab",
			name = innerGitlabName,
			dataSourceId = nil,
			dataSourceUsername = params.username,
			enable = 1,
			apiBaseUrl = urlPrefix,
			rawBaseUrl = rawPrefix,
		}

		-- 不存在创建用户
		if not data or #data == 0 then 
			System.os.GetUrl({
				url= urlPrefix .. "/users", 
				headers={['PRIVATE-TOKEN']= adminToken},
				method = "POST",
				form = params,
				json = true,
			}, resume)
			local code, data = yield()
			if code ~= 201 then
				log(data)
				return errors:wrap(errors.SERVER_INNER_ERROR)
			end
			ds.dataSourceId = data.data.id
		else
			ds.dataSourceId = data[1].id
		end

		-- 获取token
		System.os.GetUrl({
			url=urlPrefix .. "/users/" .. tostring(ds.dataSourceId) .. "/impersonation_tokens",
			headers={['PRIVATE-TOKEN']= adminToken},
			method = "GET",
			json = true,
		}, resume)
		local code, data = yield()
		if code ~= 200 then
			log(data)
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end	
		data = data.data or {}
		for _, token in ipairs(data) do
			if not token.revoked and token.active then
				ds.dataSourceToken = token.token		
				break
			end
		end
		-- 没有有效token 则创建
		if not ds.dataSouceToken then 
			System.os.GetUrl({
				url=urlPrefix .. "/users/" .. tostring(ds.dataSourceId) .. "/impersonation_tokens",
				headers={['PRIVATE-TOKEN']= adminToken},
				method = "POST",
				form = {["name"]="keepwork", ["expires_at"]="2222-12-12", ["scopes"]={"api","read_user"}},
				json = true,
			}, resume)
			local code, data = yield()
			if code ~= 201 then
				log(data)
				return errors:wrap(errors.SERVER_INNER_ERROR)
			end	
			data = data.data or {}
			ds.dataSourceToken = data.token
		end
		-- 创建数据库记录
		self:db():insertOne({["+userId+name"]={ds.userId, ds.name}}, ds, resume)
		local _, dataSourceInfo = yield()
		if not dataSourceInfo then
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end
		-- 更改用户信息
		local userDB = models.user:new()
		userDB:db():updateOne({_id=ds.userId}, {dataSourceId=dataSourceInfo._id}, resume)
		local err, data = yield()
		if err or (not data) then
			return errors:wrap(errors.SERVER_INNER_ERROR)
		end
		return errors:wrap(nil, dataSourceInfo)
	else 
		if ds.enable == 0 then
			ds.enable = 1
			self:api_upsert(ds)
		end
	end 

	return errors:wrap(nil, ds)
end












