<?npl
--[[
Title: site data source
Author: wuxiangan
Date: 2017/06/06
]]


include_once("./abstract/base.page")
include_once("./user.page")
include_once("./website.page")
include_once("./site_data_source.page")


local data_upgrade = inherit(models.abstract.base, gettable("models.data_upgrade"))


-- 兼容就旧版本数据源代码
function data_upgrade:api_updateUserDataSource(user)
	local userDB = models.user:new()
	local siteDataSourceDB = models.site_data_source:new()
	local dataSourceDB = models.data_source:new()

	local siteDataSource = siteDataSourceDB:api_getDefaultSiteDataSource({username=user.username}).data
	
	if not siteDataSource then
		LOG.std(nil, "error", "keepwork", "get site data souce failed")
		return	
	end

	local defaultDataSourceId = siteDataSource._id
	self:db():updateOne({_id=user._id}, {dataSourceId=defaultDataSourceId}, resume)
	yield()

	local websiteDB = models.website:new()
	local allSiteList = websiteDB:api_getAllByUsername({username=user.username}).data
	for _, site in ipairs(allSiteList or {}) do
		websiteDB:db():updateOne({_id=site._id}, {_unset={"dataSourceId"}}, resume)
		yield()		
	end

	return
end

-- 数据源升级
function data_upgrade:api_dataSourceUpgrade() 
	local userDB = models.user:new()
	local siteDataSourceDB = models.site_data_source:new()
	local dataSourceDB = models.data_source:new()

	siteDataSourceDB:db():makeEmpty({}, resume)
	yield()

	dataSourceDB:db():makeEmpty({}, resume)
	yield()

	userDB:db():find({_id={gt=0}}, resume)
	local _, userList = yield()

	for _, user in ipairs(userList or {}) do
		self:api_updateUserDataSource(user)			
	end
end

