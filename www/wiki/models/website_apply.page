<?npl
--[[
Title: org member
Author: wuxiangan
Date: 2016/11/17
]]

include_once("./abstract/base.page");
include_once("./website.page");
include_once("./website_member.page");
include_once("./website_works.page");
include_once("./user.page");
include_once("./user_works.page");

local website_apply = inherit(models.abstract.base, gettable("models.website_apply"))
website_apply.db_name="website_apply"

function website_apply:ctor()
	self:addfield("websiteId", "number")      -- 站点ID
	self:addfield("applyId", "number")        -- 申请ID  userId worksId
	self:addfield("applyType", "number")      -- 申请类型 成员 作品 其它
end

-- 通过websiteID删除
function website_apply:api_deleteByWebsiteId(params) 
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():delete({["+websiteId"]={params.websiteId}}, resume)
	
	return errors:wrap(yield())
end

-- 创建申请记录
function website_apply:api_upsert(params)
	if (not params.websiteId) or (not params.applyId) or (not params.applyType) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():insertOne({["+websiteId+applyId+applyType"]={params.websiteId, params.applyId, params.applyType}}, params, resume)
	return errors:wrap(yield())
end

-- 删除申请记录
function website_apply:api_deleteByKey(params)
	if (not params.websiteId) or (not params.applyId) or (not params.applyType) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():deleteOne({["+websiteId+applyId+applyType"]={params.websiteId, params.applyId, params.applyType}}, resume)
	return errors:wrap(yield())
end

-- 成员申请
function website_apply:api_memberApply(params)
	if (not params.websiteId) or (not params.applyId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local websiteMemberDB = models.website_member:new()
	websiteMemberDB:db():find({["+websiteId+userId"]={params.websiteId, params.applyId}}, resume)
	local err, data = yield()
	-- 已经存在不管
	if data and data._id then
		return errors:wrap(nil)
	end	

	params.applyType = const.WEBSITE_APPLY_TYPE_MEMBER
	
	self:db():insertOne({["+websiteId+applyId+applyType"]={params.websiteId, params.applyId, params.applyType}}, params, resume)
	return errors:wrap(yield())
end

-- 作品申请
function website_apply:api_worksApply(params)
	if (not params.websiteId) or (not params.applyId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local websiteWorksDB = models.website_works:new()
	websiteWorksDB:db():findOne({["+websiteId+worksId"] = {params.websiteId, params.applyId}}, resume)
	local err, data = yield()
	-- 已经存在不管
	if data and data._id then
		return errors:wrap(nil)
	end	

	params.applyType = const.WEBSITE_APPLY_TYPE_WORKS
	
	self:db():insertOne({["+websiteId+applyId+applyType"]={params.websiteId, params.applyId, params.applyType}}, params, resume)
	return errors:wrap(yield())
end

-- 作品批量申请
function website_apply:api_worksBatchApply(params)
	if (not params.websiteId) or (not params.applyIdList) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	for _, applyId in pairs(params.applyIdList or {}) do
		self:api_worksApply({websiteId=params.websiteId, applyId=applyId})
	end	
	
	return errors:wrap()
end
	
-- 获得申请表
function website_apply:get(params) 
	local skip, limit = util:pagination(params)
	local query = util:formatQuery(params)
	query._id = {gt=0, skip=skip, limit=limit}
	self:db():find(query, resume)
	--self:db():find({["+_id+websiteId+applyId"]={gt=0}}, resume)
	return errors:wrap(yield())
end 

-- 获取待审核的成员
function website_apply:api_getMemberByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	params.applyType=const.WEBSITE_APPLY_TYPE_MEMBER
	local query = {["+websiteId+applyType"]={params.websiteId, params.applyType}}
	self:db():count(query, resume)
	local _, total = yield()

	local skip, limit = util:pagination(params)
	query = {["+websiteId+applyType"]={params.websiteId, params.applyType, skip=skip, limit=limit}}
	self:db():find(query, resume)
	local _, data = yield()
	
	local userDB = models.user:new()
	for _, obj in ipairs(data or {}) do
		obj.userInfo = userDB:api_getById({userId=obj.applyId}).data
	end
		
	return errors:wrap(nil, {total=total, applyList=data})
end

-- 同意成员加入
function website_apply:api_agreeMember(params)
	if (not params.websiteId) or (not params.applyId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.applyType = const.WEBSITE_APPLY_TYPE_MEMBER
	self:api_deleteByKey(params)

	local websiteMemberDB = models.website_member:new()
	websiteMemberDB:api_create({websiteId=params.websiteId, userId=params.applyId, roleId=const.WEBSITE_USER_ROLE_NORMAL})
	
	return errors:wrap(nil)
end

-- 拒绝成员加入
function website_apply:api_refuseMember(params)
	if (not params.websiteId) or (not params.applyId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.applyType = const.WEBSITE_APPLY_TYPE_MEMBER
	return self:api_deleteByKey(params)
end

-- 获得待审核的作品列表
function website_apply:api_getWorksByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	params.applyType=const.WEBSITE_APPLY_TYPE_WORKS
	local query = {["+websiteId+applyType"]={params.websiteId, params.applyType}}
	self:db():count(query, resume)
	local _, total = yield()
	total = total or 0

	local skip, limit = util:pagination(params)
	query = {["+websiteId+applyType"]={params.websiteId, params.applyType, skip=skip, limit=limit}}
	self:db():find(query, resume)
	local _, applyList = yield()
	
	local userWorksDB = models.user_works:new()
	for _, obj in pairs(applyList or {}) do
		obj.worksInfo = userWorksDB:api_getById({worksId=obj.applyId}).data
	end
		
	return errors:wrap(nil, {total=total, applyList=applyList})
end

-- 同意作品加入
function website_apply:api_agreeWorks(params)
	if (not params.websiteId) or (not params.applyId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.applyType=const.WEBSITE_APPLY_TYPE_WORKS
	self:api_deleteByKey(params)
	
	local websiteWorksDB = models.website_works:new()
	websiteWorksDB:api_upsert({websiteId=params.websiteId, worksId=params.applyId, worksFlag=const.WEBSITE_WORKS_FLAG_NORMAL})
	
	return errors:wrap(nil)
end

-- 拒绝成员加入
function website_apply:api_refuseWorks(params)
	if (not params.websiteId) or (not params.applyId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.applyType=const.WEBSITE_APPLY_TYPE_WORKS
	return self:api_deleteByKey(params)
end


