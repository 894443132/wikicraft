<?npl
--[[
Title: wiki module
Author: wuxiangan
Date: 2017/2/27
]]

include_once("./abstract/base.page")
include_once("./qiniu_files.page")

local qiniu = inherit(models.abstract.base, gettable("models.qiniu"))
qiniu.db_name = "qiniu"

function qiniu:ctor() 
	self:addfield("username", "string") -- 用户名
	self:addfield("used", "number")   -- 用户已使用的大小
	self:addfield("total", "number")  -- 用户存贮空间大小
end


function qiniu:api_upsert(params)
	
end

-- 获取用户存贮使用状态
function qiniu:api_getByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)

	return errors:wrap(yield())
end

-- 用户上传文件
function qiniu:api_upload(params)
	local username = getUsername()
	
	local download_url = self:api_getDownloadUrl(params).data
	download_url = download_url and download_url.download_url

	if not download_url or not params.size or not params.hash or not params.size or params.size < 1 then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={username}}, resume)
	local _, data = yield()

	if not data then
		data = {
			username=username,
			used = 0,
			total = 2 * 1024 * 1024 * 1024,
		}
		--return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	data.used = data.used + params.size
	if data.used > data.total then
		return errors:wrap(errors:new("用户空间使用已超限制"))
	end
		
	params.username = username
	params.download_url = download_url

	local qiniu_files_db = models.qiniu_files:new()

	local file = qiniu_files_db:api_upsert(params).data

	if not file then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	self:db():insertOne({["+username"]={username}}, data, resume)
	yield()

	return errors:wrap(nil, file)
end

-- 获取用户存贮空间状态
function qiniu:api_getByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)
	
	return errors:wrap(yield())
end


function qiniu:api_uploadToken(params)
	local data = self:api_getUploadToken(params).data

	 --返回qiniu sdk协议数据格式
	return {uptoken=data.token}
end

-- 获取上传token
function qiniu:api_getUploadToken(params)
	NPL.call("lib/libQiNiuPlugin.so", {cmd="getUploadToken", expires=params.expires})
	--log(msg)
	-- msg = {token:"xxx"}
	return errors:wrap(nil, msg)
end

-- 获取下载url
function qiniu:api_getDownloadUrl(params)
	if not params.key then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local domain = params.domain or "ov62qege8.bkt.clouddn.com"

	NPL.call("lib/libQiNiuPlugin.so", {cmd="getDownloadUrl", domain=domain, key=params.key, expires=params.expires})
	--log(msg)
	-- msg = {download_url:"xx"}
	return errors:wrap(nil, msg)
end
