<?npl
--[[
Title: modelson
Author: 
Date: 2017/7/19
http://localhost:8099//api/mod/modelshare/models/modelson  地址
]]

include_once("../../../models/abstract/base.page");

local modelson = inherit(models.abstract.base, gettable("models.modelson"));

modelson.db_name = "modelson";

function modelson:ctor()
	self:addfield("worldName", "string",false);
	self:addfield("name", "string", false);
	self:addfield("modNumber","number",false);
	self:addfield("big","number",false);
	self:addfield("words","string",false);
	self:addfield("_id","number",false);
	
end
增加
function modelson:api_add(params)
	local err, query = self:validateQuery(params);
	log(query)
	self:db():insertOne(
		{
			worldName    = query.worldName,
			name         = query.name,
			modNumber    = query.modNumber,
			big          = query.big,
			words        = query.words,
			
		}, resume);
	local err, data = yield();
	if not err then
		return errors:wrap(nil, data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

end
--查找
function modelson:api_getData(params)
	local err, query = self:validateQuery(params);
	log(params)
	log(query)
	self:db():findOne({_id = query._id},resume);
	local err, data = yield();
	
	if not err then
		return errors:wrap(nil, data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end
--修改
function modelson:api_modify(params)
	local err, query = self:validateQuery(params);
	
	if(not query._id) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
	
	if(not query.foo) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
	
	self:db():updateOne({_id = query._id},
	{
			username     = query.usename,
			author       = query.author,
			modelsnumber = query.modelsnumber,
			blocks       = query.block,
			volume       = query.volume,
			words        = query.words,
			
	},resume);
	local err,data = yield();
	
	if not err then
		return errors:wrap(nil, data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

end
--删除
function modelson:api_delete(params)
	local err, query = self:validateQuery(params);
	
	if(not query.id) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
	
	self:db():deleteOne({_id = query.id}, resume);
	local err,data = yield();
	
	if not err then
		return errors:wrap(nil, data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
	
end

?>